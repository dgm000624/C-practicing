
16bittimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1f  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f4  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000021c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	a8 c0       	rjmp	.+336    	; 0x18a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8d d0       	rcall	.+282    	; 0x1de <main>
  c4:	cc c0       	rjmp	.+408    	; 0x25e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:

void Segment(int);
int t_cnt = 0, m_cnt = 0;

void Segment(int N)
{
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	fc 01       	movw	r30, r24
	int i;
	unsigned char N1000, N100, N10, N1;
	int Buff;
	N1000 = N/1000;
  d6:	68 ee       	ldi	r22, 0xE8	; 232
  d8:	73 e0       	ldi	r23, 0x03	; 3
  da:	9a d0       	rcall	.+308    	; 0x210 <__divmodhi4>
  dc:	8b 01       	movw	r16, r22
	Buff = N%1000;
	N100 = Buff/100;
  de:	24 e6       	ldi	r18, 0x64	; 100
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	95 d0       	rcall	.+298    	; 0x210 <__divmodhi4>
  e6:	eb 01       	movw	r28, r22
	Buff = N%100;
  e8:	cf 01       	movw	r24, r30
  ea:	b9 01       	movw	r22, r18
  ec:	91 d0       	rcall	.+290    	; 0x210 <__divmodhi4>
	N10 = Buff/10;
  ee:	0f 2e       	mov	r0, r31
  f0:	fa e0       	ldi	r31, 0x0A	; 10
  f2:	ef 2e       	mov	r14, r31
  f4:	f1 2c       	mov	r15, r1
  f6:	f0 2d       	mov	r31, r0
  f8:	b7 01       	movw	r22, r14
  fa:	8a d0       	rcall	.+276    	; 0x210 <__divmodhi4>
	N1 = N%10;
  fc:	9b 01       	movw	r18, r22
  fe:	cf 01       	movw	r24, r30
 100:	b7 01       	movw	r22, r14
 102:	86 d0       	rcall	.+268    	; 0x210 <__divmodhi4>
	
	for(i = 0; i<30; i++)
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	36 c0       	rjmp	.+108    	; 0x176 <Segment+0xae>
	{
		PORTC = 0x0e;
 10a:	6e e0       	ldi	r22, 0x0E	; 14
 10c:	65 bb       	out	0x15, r22	; 21
		PORTA = Font[N1000];
 10e:	f8 01       	movw	r30, r16
 110:	ff 27       	eor	r31, r31
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	60 81       	ld	r22, Z
 118:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	e6 e6       	ldi	r30, 0x66	; 102
 11c:	fe e0       	ldi	r31, 0x0E	; 14
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Segment+0x56>
 122:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0d;
 124:	6d e0       	ldi	r22, 0x0D	; 13
 126:	65 bb       	out	0x15, r22	; 21
		PORTA = Font[N100];
 128:	fe 01       	movw	r30, r28
 12a:	ff 27       	eor	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	60 81       	ld	r22, Z
 132:	6b bb       	out	0x1b, r22	; 27
 134:	e6 e6       	ldi	r30, 0x66	; 102
 136:	fe e0       	ldi	r31, 0x0E	; 14
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Segment+0x70>
 13c:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0b;
 13e:	6b e0       	ldi	r22, 0x0B	; 11
 140:	65 bb       	out	0x15, r22	; 21
		PORTA = Font[N10];
 142:	f9 01       	movw	r30, r18
 144:	ff 27       	eor	r31, r31
 146:	e0 50       	subi	r30, 0x00	; 0
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	60 81       	ld	r22, Z
 14c:	6b bb       	out	0x1b, r22	; 27
 14e:	e6 e6       	ldi	r30, 0x66	; 102
 150:	fe e0       	ldi	r31, 0x0E	; 14
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <Segment+0x8a>
 156:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x07;
 158:	67 e0       	ldi	r22, 0x07	; 7
 15a:	65 bb       	out	0x15, r22	; 21
		PORTA = Font[N1];
 15c:	fc 01       	movw	r30, r24
 15e:	ff 27       	eor	r31, r31
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	60 81       	ld	r22, Z
 166:	6b bb       	out	0x1b, r22	; 27
 168:	e6 e6       	ldi	r30, 0x66	; 102
 16a:	fe e0       	ldi	r31, 0x0E	; 14
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <Segment+0xa4>
 170:	00 00       	nop
	N100 = Buff/100;
	Buff = N%100;
	N10 = Buff/10;
	N1 = N%10;
	
	for(i = 0; i<30; i++)
 172:	4f 5f       	subi	r20, 0xFF	; 255
 174:	5f 4f       	sbci	r21, 0xFF	; 255
 176:	4e 31       	cpi	r20, 0x1E	; 30
 178:	51 05       	cpc	r21, r1
 17a:	3c f2       	brlt	.-114    	; 0x10a <Segment+0x42>
		
		PORTC = 0x07;
		PORTA = Font[N1];
		_delay_ms(1);
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	08 95       	ret

0000018a <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
	TCNT1H = 0xf4;
 198:	84 ef       	ldi	r24, 0xF4	; 244
 19a:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xc0;
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	8c bd       	out	0x2c, r24	; 44
	t_cnt++;
 1a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
 1a4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <t_cnt+0x1>
 1ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <t_cnt>
	if(t_cnt >=5){
 1b2:	05 97       	sbiw	r24, 0x05	; 5
 1b4:	6c f0       	brlt	.+26     	; 0x1d0 <__vector_14+0x46>
		t_cnt = 0;
 1b6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <t_cnt+0x1>
 1ba:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <t_cnt>
		m_cnt ++;
 1be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	}
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <main>:

int main(void)
{
    DDRA = 0xff;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 1e2:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xff;
 1e4:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0xff;
 1e6:	85 bb       	out	0x15, r24	; 21
	ASSR = 0;
 1e8:	10 be       	out	0x30, r1	; 48
	TIMSK = 0x04;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0;
 1ee:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05;
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0;
 1f4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1H = 0xf4;
 1f8:	84 ef       	ldi	r24, 0xF4	; 244
 1fa:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xc0;
 1fc:	80 ec       	ldi	r24, 0xC0	; 192
 1fe:	8c bd       	out	0x2c, r24	; 44
	TIFR = 0;
 200:	16 be       	out	0x36, r1	; 54
	sei();
 202:	78 94       	sei
	
    while (1) 
    {
		Segment(m_cnt);
 204:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 208:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 20c:	5d df       	rcall	.-326    	; 0xc8 <Segment>
 20e:	fa cf       	rjmp	.-12     	; 0x204 <main+0x26>

00000210 <__divmodhi4>:
 210:	97 fb       	bst	r25, 7
 212:	07 2e       	mov	r0, r23
 214:	16 f4       	brtc	.+4      	; 0x21a <__divmodhi4+0xa>
 216:	00 94       	com	r0
 218:	06 d0       	rcall	.+12     	; 0x226 <__divmodhi4_neg1>
 21a:	77 fd       	sbrc	r23, 7
 21c:	08 d0       	rcall	.+16     	; 0x22e <__divmodhi4_neg2>
 21e:	0b d0       	rcall	.+22     	; 0x236 <__udivmodhi4>
 220:	07 fc       	sbrc	r0, 7
 222:	05 d0       	rcall	.+10     	; 0x22e <__divmodhi4_neg2>
 224:	3e f4       	brtc	.+14     	; 0x234 <__divmodhi4_exit>

00000226 <__divmodhi4_neg1>:
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	08 95       	ret

0000022e <__divmodhi4_neg2>:
 22e:	70 95       	com	r23
 230:	61 95       	neg	r22
 232:	7f 4f       	sbci	r23, 0xFF	; 255

00000234 <__divmodhi4_exit>:
 234:	08 95       	ret

00000236 <__udivmodhi4>:
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	51 e1       	ldi	r21, 0x11	; 17
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__udivmodhi4_ep>

0000023e <__udivmodhi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	a6 17       	cp	r26, r22
 244:	b7 07       	cpc	r27, r23
 246:	10 f0       	brcs	.+4      	; 0x24c <__udivmodhi4_ep>
 248:	a6 1b       	sub	r26, r22
 24a:	b7 0b       	sbc	r27, r23

0000024c <__udivmodhi4_ep>:
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	5a 95       	dec	r21
 252:	a9 f7       	brne	.-22     	; 0x23e <__udivmodhi4_loop>
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
