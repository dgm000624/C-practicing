
FND1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2b  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002da  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a0 c0       	rjmp	.+320    	; 0x182 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d0       	rcall	.+280    	; 0x1dc <main>
  c4:	c9 c0       	rjmp	.+402    	; 0x258 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
void Segment(int);

int t_cnt = 0, m_cnt = 0;

void Segment(int N)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	unsigned char N1000, N100, N10, N1;
	int Buff;
	
	N1000 = N/1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	9a d0       	rcall	.+308    	; 0x20a <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
	Buff = N % 1000;
	N100 = Buff/100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	96 d0       	rcall	.+300    	; 0x20a <__divmodhi4>
  de:	eb 01       	movw	r28, r22
	Buff = Buff % 100;
	N10 = Buff /10;
	N1 = Buff % 10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	92 d0       	rcall	.+292    	; 0x20a <__divmodhi4>
	
	for( int i = 0; i<30;i++){
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	42 c0       	rjmp	.+132    	; 0x170 <Segment+0xa8>
		PORTC = 0x0e;
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N1000];
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	40 81       	ld	r20, Z
  fe:	40 95       	com	r20
 100:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	e6 e6       	ldi	r30, 0x66	; 102
 104:	fe e0       	ldi	r31, 0x0E	; 14
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Segment+0x3e>
 10a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0d;
 10c:	4d e0       	ldi	r20, 0x0D	; 13
 10e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N100];
 110:	fe 01       	movw	r30, r28
 112:	ff 27       	eor	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	40 81       	ld	r20, Z
 11e:	40 95       	com	r20
 120:	4b bb       	out	0x1b, r20	; 27
 122:	e6 e6       	ldi	r30, 0x66	; 102
 124:	fe e0       	ldi	r31, 0x0E	; 14
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <Segment+0x5e>
 12a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0b;
 12c:	4b e0       	ldi	r20, 0x0B	; 11
 12e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N10];
 130:	fb 01       	movw	r30, r22
 132:	ff 27       	eor	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	40 81       	ld	r20, Z
 13e:	40 95       	com	r20
 140:	4b bb       	out	0x1b, r20	; 27
 142:	e6 e6       	ldi	r30, 0x66	; 102
 144:	fe e0       	ldi	r31, 0x0E	; 14
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Segment+0x7e>
 14a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x07;
 14c:	47 e0       	ldi	r20, 0x07	; 7
 14e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N1];
 150:	fc 01       	movw	r30, r24
 152:	ff 27       	eor	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	40 81       	ld	r20, Z
 15e:	40 95       	com	r20
 160:	4b bb       	out	0x1b, r20	; 27
 162:	e6 e6       	ldi	r30, 0x66	; 102
 164:	fe e0       	ldi	r31, 0x0E	; 14
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <Segment+0x9e>
 16a:	00 00       	nop
	N100 = Buff/100;
	Buff = Buff % 100;
	N10 = Buff /10;
	N1 = Buff % 10;
	
	for( int i = 0; i<30;i++){
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	2e 31       	cpi	r18, 0x1E	; 30
 172:	31 05       	cpc	r19, r1
 174:	0c f4       	brge	.+2      	; 0x178 <Segment+0xb0>
 176:	ba cf       	rjmp	.-140    	; 0xec <Segment+0x24>
		
		PORTC = 0x07;
		PORTA = ~Font[N1];
		_delay_ms(1);
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
	cli();
 192:	f8 94       	cli
	TCNT0 = 0xF2;
 194:	82 ef       	ldi	r24, 0xF2	; 242
 196:	82 bf       	out	0x32, r24	; 50
	t_cnt++;
 198:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <t_cnt>
 19c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <t_cnt+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <t_cnt+0x1>
 1a6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <t_cnt>
	if(t_cnt >=1000){
 1aa:	88 3e       	cpi	r24, 0xE8	; 232
 1ac:	93 40       	sbci	r25, 0x03	; 3
 1ae:	6c f0       	brlt	.+26     	; 0x1ca <__vector_16+0x48>
		t_cnt = 0;
 1b0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <t_cnt+0x1>
 1b4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <t_cnt>
		m_cnt ++;
 1b8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1bc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 1c6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
	sei();
 1ca:	78 94       	sei
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <main>:

int main(void)
{
	DDRA = 0xff;
 1dc:	9f ef       	ldi	r25, 0xFF	; 255
 1de:	9a bb       	out	0x1a, r25	; 26
    DDRC = 0x0f;
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xff;
 1e4:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0x0f;
 1e6:	85 bb       	out	0x15, r24	; 21
	ASSR = 0;
 1e8:	10 be       	out	0x30, r1	; 48
    TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);		//1024분주비
 1ea:	83 b7       	in	r24, 0x33	; 51
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0xF2;											// 255 + 1 _ 0x0f
 1f0:	82 ef       	ldi	r24, 0xF2	; 242
 1f2:	82 bf       	out	0x32, r24	; 50
    TIMSK |= 1 << TOIE0;
 1f4:	87 b7       	in	r24, 0x37	; 55
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	87 bf       	out	0x37, r24	; 55
    TIFR = 0;
 1fa:	16 be       	out	0x36, r1	; 54
    sei();
 1fc:	78 94       	sei

    while (1) 
    {
		Segment(m_cnt);
 1fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 202:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 206:	60 df       	rcall	.-320    	; 0xc8 <Segment>
 208:	fa cf       	rjmp	.-12     	; 0x1fe <main+0x22>

0000020a <__divmodhi4>:
 20a:	97 fb       	bst	r25, 7
 20c:	07 2e       	mov	r0, r23
 20e:	16 f4       	brtc	.+4      	; 0x214 <__divmodhi4+0xa>
 210:	00 94       	com	r0
 212:	06 d0       	rcall	.+12     	; 0x220 <__divmodhi4_neg1>
 214:	77 fd       	sbrc	r23, 7
 216:	08 d0       	rcall	.+16     	; 0x228 <__divmodhi4_neg2>
 218:	0b d0       	rcall	.+22     	; 0x230 <__udivmodhi4>
 21a:	07 fc       	sbrc	r0, 7
 21c:	05 d0       	rcall	.+10     	; 0x228 <__divmodhi4_neg2>
 21e:	3e f4       	brtc	.+14     	; 0x22e <__divmodhi4_exit>

00000220 <__divmodhi4_neg1>:
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__divmodhi4_neg2>:
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255

0000022e <__divmodhi4_exit>:
 22e:	08 95       	ret

00000230 <__udivmodhi4>:
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	51 e1       	ldi	r21, 0x11	; 17
 236:	07 c0       	rjmp	.+14     	; 0x246 <__udivmodhi4_ep>

00000238 <__udivmodhi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	a6 17       	cp	r26, r22
 23e:	b7 07       	cpc	r27, r23
 240:	10 f0       	brcs	.+4      	; 0x246 <__udivmodhi4_ep>
 242:	a6 1b       	sub	r26, r22
 244:	b7 0b       	sbc	r27, r23

00000246 <__udivmodhi4_ep>:
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	5a 95       	dec	r21
 24c:	a9 f7       	brne	.-22     	; 0x238 <__udivmodhi4_loop>
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
