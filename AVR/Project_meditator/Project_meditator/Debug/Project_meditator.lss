
Project_meditator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000460  00800100  0000138c  00001420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000138c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800560  00800560  00001880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003764  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000155d  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d02  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000884  00000000  00000000  0000857c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000809  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5b  00000000  00000000  00009609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	ff c0       	rjmp	.+510    	; 0x204 <__vector_1>
       6:	00 00       	nop
       8:	24 c1       	rjmp	.+584    	; 0x252 <__vector_2>
       a:	00 00       	nop
       c:	62 c1       	rjmp	.+708    	; 0x2d2 <__vector_3>
       e:	00 00       	nop
      10:	a0 c1       	rjmp	.+832    	; 0x352 <__vector_4>
      12:	00 00       	nop
      14:	de c1       	rjmp	.+956    	; 0x3d2 <__vector_5>
      16:	00 00       	nop
      18:	1b c2       	rjmp	.+1078   	; 0x450 <__vector_6>
      1a:	00 00       	nop
      1c:	54 c2       	rjmp	.+1192   	; 0x4c6 <__vector_7>
      1e:	00 00       	nop
      20:	94 c2       	rjmp	.+1320   	; 0x54a <__vector_8>
      22:	00 00       	nop
      24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	cd c7       	rjmp	.+3994   	; 0xfe4 <__vector_18>
      4a:	00 00       	nop
      4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__vector_21>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c7       	rjmp	.+3632   	; 0xe9a <__vector_26>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	33 05       	cpc	r19, r3
      8e:	35 05       	cpc	r19, r5
      90:	37 05       	cpc	r19, r7
      92:	39 05       	cpc	r19, r9
      94:	3b 05       	cpc	r19, r11
      96:	41 05       	cpc	r20, r1
      98:	43 05       	cpc	r20, r3

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	15 e0       	ldi	r17, 0x05	; 5
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ec e8       	ldi	r30, 0x8C	; 140
      ae:	f3 e1       	ldi	r31, 0x13	; 19
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 36       	cpi	r26, 0x60	; 96
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	a0 e6       	ldi	r26, 0x60	; 96
      c4:	b5 e0       	ldi	r27, 0x05	; 5
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	af 38       	cpi	r26, 0x8F	; 143
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	9e d4       	rcall	.+2364   	; 0xa0e <main>
      d2:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <__vector_21>:

unsigned int adc_data = 0;
int day = 1;

ISR(ADC_vect)
{
      d8:	1f 92       	push	r1
      da:	0f 92       	push	r0
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	0b b6       	in	r0, 0x3b	; 59
      e4:	0f 92       	push	r0
      e6:	2f 93       	push	r18
      e8:	3f 93       	push	r19
      ea:	4f 93       	push	r20
      ec:	5f 93       	push	r21
      ee:	6f 93       	push	r22
      f0:	7f 93       	push	r23
      f2:	8f 93       	push	r24
      f4:	9f 93       	push	r25
      f6:	af 93       	push	r26
      f8:	bf 93       	push	r27
      fa:	ef 93       	push	r30
      fc:	ff 93       	push	r31
	adc_data = ADCW;
      fe:	84 b1       	in	r24, 0x04	; 4
     100:	95 b1       	in	r25, 0x05	; 5
     102:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <__data_end+0x1>
     106:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <__data_end>
	ADCSRA = ADCSRA | 0x40;
     10a:	86 b1       	in	r24, 0x06	; 6
     10c:	80 64       	ori	r24, 0x40	; 64
     10e:	86 b9       	out	0x06, r24	; 6
	
	if(adc_data <200 && day == 1)
     110:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <__data_end>
     114:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <__data_end+0x1>
     118:	88 3c       	cpi	r24, 0xC8	; 200
     11a:	91 05       	cpc	r25, r1
     11c:	78 f4       	brcc	.+30     	; 0x13c <__vector_21+0x64>
     11e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <day>
     122:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <day+0x1>
     126:	21 30       	cpi	r18, 0x01	; 1
     128:	31 05       	cpc	r19, r1
     12a:	41 f4       	brne	.+16     	; 0x13c <__vector_21+0x64>
	{
		USART0_str("\r\nNight comes\r\n");
     12c:	80 e2       	ldi	r24, 0x20	; 32
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	76 d7       	rcall	.+3820   	; 0x101e <USART0_str>
		day = 0;
     132:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <day+0x1>
     136:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <day>
     13a:	12 c0       	rjmp	.+36     	; 0x160 <__vector_21+0x88>
	}
	else if(adc_data>700 && day == 0)
     13c:	8d 3b       	cpi	r24, 0xBD	; 189
     13e:	92 40       	sbci	r25, 0x02	; 2
     140:	78 f0       	brcs	.+30     	; 0x160 <__vector_21+0x88>
     142:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <day>
     146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <day+0x1>
     14a:	89 2b       	or	r24, r25
     14c:	49 f4       	brne	.+18     	; 0x160 <__vector_21+0x88>
	{
		USART0_str("\r\nDay comes\r\n");
     14e:	80 e3       	ldi	r24, 0x30	; 48
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	65 d7       	rcall	.+3786   	; 0x101e <USART0_str>
		day = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <day+0x1>
     15c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <day>
	}	
}
     160:	ff 91       	pop	r31
     162:	ef 91       	pop	r30
     164:	bf 91       	pop	r27
     166:	af 91       	pop	r26
     168:	9f 91       	pop	r25
     16a:	8f 91       	pop	r24
     16c:	7f 91       	pop	r23
     16e:	6f 91       	pop	r22
     170:	5f 91       	pop	r21
     172:	4f 91       	pop	r20
     174:	3f 91       	pop	r19
     176:	2f 91       	pop	r18
     178:	0f 90       	pop	r0
     17a:	0b be       	out	0x3b, r0	; 59
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <Init_cds>:

void Init_cds()
{
	DDRF = 0x00;
     186:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADMUX = 0x03;
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x8b;
     18e:	8b e8       	ldi	r24, 0x8B	; 139
     190:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	86 e6       	ldi	r24, 0x66	; 102
     194:	9e e0       	ldi	r25, 0x0E	; 14
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <Init_cds+0x10>
     19a:	00 00       	nop
	_delay_ms(1);
	ADCSRA |= 0x40;
     19c:	86 b1       	in	r24, 0x06	; 6
     19e:	80 64       	ori	r24, 0x40	; 64
     1a0:	86 b9       	out	0x06, r24	; 6
     1a2:	08 95       	ret

000001a4 <Init_color>:
	{255, 0, 0}			//Red
};

void Init_color(void)	//color 최초 설정용 함수 
{
	DDRB |= 0xe0;
     1a4:	87 b3       	in	r24, 0x17	; 23
     1a6:	80 6e       	ori	r24, 0xE0	; 224
     1a8:	87 bb       	out	0x17, r24	; 23
	ASSR = 0;
     1aa:	10 be       	out	0x30, r1	; 48
	
	TCCR1A = 0xa9;
     1ac:	89 ea       	ldi	r24, 0xA9	; 169
     1ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x02;
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
     1b4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1b8:	08 95       	ret

000001ba <change_color>:
}

void change_color(char color)	// 색 바꾸기
{
	int temp = color - '1';
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	c1 97       	sbiw	r24, 0x31	; 49

	OCR1A = ~RGB_Table[temp][0];
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	df 01       	movw	r26, r30
     1c6:	a8 0f       	add	r26, r24
     1c8:	b9 1f       	adc	r27, r25
     1ca:	aa 0f       	add	r26, r26
     1cc:	bb 1f       	adc	r27, r27
     1ce:	a8 5f       	subi	r26, 0xF8	; 248
     1d0:	be 4f       	sbci	r27, 0xFE	; 254
     1d2:	2d 91       	ld	r18, X+
     1d4:	3c 91       	ld	r19, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	20 95       	com	r18
     1da:	30 95       	com	r19
     1dc:	3b bd       	out	0x2b, r19	; 43
     1de:	2a bd       	out	0x2a, r18	; 42
	OCR1B = ~RGB_Table[temp][1];
     1e0:	12 96       	adiw	r26, 0x02	; 2
     1e2:	2d 91       	ld	r18, X+
     1e4:	3c 91       	ld	r19, X
     1e6:	13 97       	sbiw	r26, 0x03	; 3
     1e8:	20 95       	com	r18
     1ea:	30 95       	com	r19
     1ec:	39 bd       	out	0x29, r19	; 41
     1ee:	28 bd       	out	0x28, r18	; 40
	OCR1C = ~RGB_Table[temp][2];
     1f0:	fd 01       	movw	r30, r26
     1f2:	84 81       	ldd	r24, Z+4	; 0x04
     1f4:	95 81       	ldd	r25, Z+5	; 0x05
     1f6:	80 95       	com	r24
     1f8:	90 95       	com	r25
     1fa:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1fe:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     202:	08 95       	ret

00000204 <__vector_1>:
int inout_index = 0;
int admit = 0;


ISR(INT0_vect)
{
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	0b b6       	in	r0, 0x3b	; 59
     210:	0f 92       	push	r0
     212:	2f 93       	push	r18
     214:	3f 93       	push	r19
     216:	4f 93       	push	r20
     218:	5f 93       	push	r21
     21a:	6f 93       	push	r22
     21c:	7f 93       	push	r23
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	af 93       	push	r26
     224:	bf 93       	push	r27
     226:	ef 93       	push	r30
     228:	ff 93       	push	r31
	LCD_Init();
     22a:	8f d3       	rcall	.+1822   	; 0x94a <LCD_Init>
}
     22c:	ff 91       	pop	r31
     22e:	ef 91       	pop	r30
     230:	bf 91       	pop	r27
     232:	af 91       	pop	r26
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	7f 91       	pop	r23
     23a:	6f 91       	pop	r22
     23c:	5f 91       	pop	r21
     23e:	4f 91       	pop	r20
     240:	3f 91       	pop	r19
     242:	2f 91       	pop	r18
     244:	0f 90       	pop	r0
     246:	0b be       	out	0x3b, r0	; 59
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <__vector_2>:

ISR(INT1_vect)
{
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	0b b6       	in	r0, 0x3b	; 59
     25e:	0f 92       	push	r0
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	if(locked == 1) return;
     278:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <locked>
     27c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <locked+0x1>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f0       	breq	.+40     	; 0x2ac <__vector_2+0x5a>
	USART0_str("\r\nRepeater says it's safe!\r\n");
     284:	8e e3       	ldi	r24, 0x3E	; 62
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	ca d6       	rcall	.+3476   	; 0x101e <USART0_str>
	Init_time();
     28a:	76 d6       	rcall	.+3308   	; 0xf78 <Init_time>
     28c:	4b e5       	ldi	r20, 0x5B	; 91
	LCD_strout(1, 0, "Press 0 to Init");
     28e:	51 e0       	ldi	r21, 0x01	; 1
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	82 d3       	rcall	.+1796   	; 0x99e <LCD_strout>
     29a:	2f ef       	ldi	r18, 0xFF	; 255
     29c:	8f e3       	ldi	r24, 0x3F	; 63
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	21 50       	subi	r18, 0x01	; 1
     2a2:	80 40       	sbci	r24, 0x00	; 0
     2a4:	90 40       	sbci	r25, 0x00	; 0
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <__vector_2+0x4e>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__vector_2+0x58>
     2aa:	00 00       	nop
     2ac:	ff 91       	pop	r31
	_delay_ms(50);
}
     2ae:	ef 91       	pop	r30
     2b0:	bf 91       	pop	r27
     2b2:	af 91       	pop	r26
     2b4:	9f 91       	pop	r25
     2b6:	8f 91       	pop	r24
     2b8:	7f 91       	pop	r23
     2ba:	6f 91       	pop	r22
     2bc:	5f 91       	pop	r21
     2be:	4f 91       	pop	r20
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0b be       	out	0x3b, r0	; 59
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <__vector_3>:
     2d2:	1f 92       	push	r1

ISR(INT2_vect)
{
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	0b b6       	in	r0, 0x3b	; 59
     2de:	0f 92       	push	r0
     2e0:	2f 93       	push	r18
     2e2:	3f 93       	push	r19
     2e4:	4f 93       	push	r20
     2e6:	5f 93       	push	r21
     2e8:	6f 93       	push	r22
     2ea:	7f 93       	push	r23
     2ec:	8f 93       	push	r24
     2ee:	9f 93       	push	r25
     2f0:	af 93       	push	r26
     2f2:	bf 93       	push	r27
     2f4:	ef 93       	push	r30
     2f6:	ff 93       	push	r31
	if(locked == 1) return;
     2f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <locked>
     2fc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <locked+0x1>
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	a1 f0       	breq	.+40     	; 0x32c <__vector_3+0x5a>
	USART0_str("\r\nRepeater says it's strange!\r\n");
     304:	8b e6       	ldi	r24, 0x6B	; 107
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	8a d6       	rcall	.+3348   	; 0x101e <USART0_str>
	Init_time();
     30a:	36 d6       	rcall	.+3180   	; 0xf78 <Init_time>
     30c:	4b e5       	ldi	r20, 0x5B	; 91
	LCD_strout(1, 0, "Press 0 to Init");
     30e:	51 e0       	ldi	r21, 0x01	; 1
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	42 d3       	rcall	.+1668   	; 0x99e <LCD_strout>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	8f e3       	ldi	r24, 0x3F	; 63
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	21 50       	subi	r18, 0x01	; 1
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <__vector_3+0x4e>
     328:	00 c0       	rjmp	.+0      	; 0x32a <__vector_3+0x58>
     32a:	00 00       	nop
     32c:	ff 91       	pop	r31
	_delay_ms(50);
}
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0b be       	out	0x3b, r0	; 59
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_4>:
     352:	1f 92       	push	r1

ISR(INT3_vect)
{
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	0b b6       	in	r0, 0x3b	; 59
     35e:	0f 92       	push	r0
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	if(locked == 1) return;
     378:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <locked>
     37c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <locked+0x1>
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	a1 f0       	breq	.+40     	; 0x3ac <__vector_4+0x5a>
	USART0_str("\r\nRepeater says Emergency!!!!\r\n");
     384:	8b e8       	ldi	r24, 0x8B	; 139
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	4a d6       	rcall	.+3220   	; 0x101e <USART0_str>
	Init_time();
     38a:	f6 d5       	rcall	.+3052   	; 0xf78 <Init_time>
     38c:	4b e5       	ldi	r20, 0x5B	; 91
	LCD_strout(1, 0, "Press 0 to Init");
     38e:	51 e0       	ldi	r21, 0x01	; 1
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 d3       	rcall	.+1540   	; 0x99e <LCD_strout>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	8f e3       	ldi	r24, 0x3F	; 63
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <__vector_4+0x4e>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_4+0x58>
     3aa:	00 00       	nop
     3ac:	ff 91       	pop	r31
	_delay_ms(50);
}
     3ae:	ef 91       	pop	r30
     3b0:	bf 91       	pop	r27
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	0f 90       	pop	r0
     3c6:	0b be       	out	0x3b, r0	; 59
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <__vector_5>:
     3d2:	1f 92       	push	r1

ISR(INT4_vect)
{
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	0b b6       	in	r0, 0x3b	; 59
     3de:	0f 92       	push	r0
     3e0:	2f 93       	push	r18
     3e2:	3f 93       	push	r19
     3e4:	4f 93       	push	r20
     3e6:	5f 93       	push	r21
     3e8:	6f 93       	push	r22
     3ea:	7f 93       	push	r23
     3ec:	8f 93       	push	r24
     3ee:	9f 93       	push	r25
     3f0:	af 93       	push	r26
     3f2:	bf 93       	push	r27
     3f4:	ef 93       	push	r30
     3f6:	ff 93       	push	r31
	EIMSK ^= (1 << INT5);
     3f8:	99 b7       	in	r25, 0x39	; 57
     3fa:	80 e2       	ldi	r24, 0x20	; 32
     3fc:	89 27       	eor	r24, r25
     3fe:	89 bf       	out	0x39, r24	; 57
	EIMSK ^= (1 << INT6);
     400:	99 b7       	in	r25, 0x39	; 57
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	89 27       	eor	r24, r25
     406:	89 bf       	out	0x39, r24	; 57
	EIMSK ^= (1 << INT7);
     408:	89 b7       	in	r24, 0x39	; 57
     40a:	80 58       	subi	r24, 0x80	; 128
     40c:	89 bf       	out	0x39, r24	; 57
	LCD_strout(1, 0, "In/Out Toggled");
     40e:	4b ea       	ldi	r20, 0xAB	; 171
     410:	51 e0       	ldi	r21, 0x01	; 1
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	c1 d2       	rcall	.+1410   	; 0x99e <LCD_strout>
     41c:	26 e6       	ldi	r18, 0x66	; 102
     41e:	86 ee       	ldi	r24, 0xE6	; 230
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	_delay_ms(20);
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0b be       	out	0x3b, r0	; 59
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_6>:

ISR(INT5_vect)
{
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	0b b6       	in	r0, 0x3b	; 59
     45c:	0f 92       	push	r0
     45e:	2f 93       	push	r18
     460:	3f 93       	push	r19
     462:	4f 93       	push	r20
     464:	5f 93       	push	r21
     466:	6f 93       	push	r22
     468:	7f 93       	push	r23
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
	if(inout_index>0) inout_index--; 
     476:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <inout_index>
     47a:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <inout_index+0x1>
     47e:	18 16       	cp	r1, r24
     480:	19 06       	cpc	r1, r25
     482:	2c f4       	brge	.+10     	; 0x48e <__vector_6+0x3e>
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <inout_index+0x1>
     48a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <inout_index>
	person_LCD(inout_index, root);
     48e:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <root>
     492:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <root+0x1>
     496:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <inout_index>
     49a:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <inout_index+0x1>
     49e:	92 d1       	rcall	.+804    	; 0x7c4 <person_LCD>
}
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0b be       	out	0x3b, r0	; 59
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <__vector_7>:

ISR(INT6_vect)
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	0b b6       	in	r0, 0x3b	; 59
     4d2:	0f 92       	push	r0
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	if(admit ==0) inout_index++;
     4ec:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <admit>
     4f0:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <admit+0x1>
     4f4:	89 2b       	or	r24, r25
     4f6:	49 f4       	brne	.+18     	; 0x50a <__vector_7+0x44>
     4f8:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <inout_index>
     4fc:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <inout_index+0x1>
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <inout_index+0x1>
     506:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <inout_index>
	admit = person_LCD(inout_index, root);
     50a:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <root>
     50e:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <root+0x1>
     512:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <inout_index>
     516:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <inout_index+0x1>
     51a:	54 d1       	rcall	.+680    	; 0x7c4 <person_LCD>
     51c:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <admit+0x1>
     520:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <admit>
}
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0b be       	out	0x3b, r0	; 59
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <__vector_8>:

ISR(INT7_vect)
{
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1
     554:	0b b6       	in	r0, 0x3b	; 59
     556:	0f 92       	push	r0
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	person* curr = root->next;
     570:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <root>
     574:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <root+0x1>
     578:	db 01       	movw	r26, r22
     57a:	56 96       	adiw	r26, 0x16	; 22
     57c:	ed 91       	ld	r30, X+
     57e:	fc 91       	ld	r31, X
     580:	57 97       	sbiw	r26, 0x17	; 23

	int i;
	for (i = 0; i < inout_index && curr != NULL; i++)
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	04 c0       	rjmp	.+8      	; 0x590 <__vector_8+0x46>
	curr = curr->next;
     588:	06 88       	ldd	r0, Z+22	; 0x16
     58a:	f7 89       	ldd	r31, Z+23	; 0x17
     58c:	e0 2d       	mov	r30, r0
ISR(INT7_vect)
{
	person* curr = root->next;

	int i;
	for (i = 0; i < inout_index && curr != NULL; i++)
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <inout_index>
     594:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <inout_index+0x1>
     598:	82 17       	cp	r24, r18
     59a:	93 07       	cpc	r25, r19
     59c:	14 f4       	brge	.+4      	; 0x5a2 <__vector_8+0x58>
     59e:	30 97       	sbiw	r30, 0x00	; 0
     5a0:	99 f7       	brne	.-26     	; 0x588 <__vector_8+0x3e>
	curr = curr->next;
	
	Toggle(curr->name, root);
     5a2:	cf 01       	movw	r24, r30
     5a4:	a3 d0       	rcall	.+326    	; 0x6ec <Toggle>
     5a6:	bf ef       	ldi	r27, 0xFF	; 255
     5a8:	2f e3       	ldi	r18, 0x3F	; 63
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	b1 50       	subi	r27, 0x01	; 1
     5ae:	20 40       	sbci	r18, 0x00	; 0
     5b0:	80 40       	sbci	r24, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <__vector_8+0x62>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <__vector_8+0x6c>
     5b6:	00 00       	nop
	_delay_ms(50);
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0b be       	out	0x3b, r0	; 59
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <Init_int>:



void Init_int()		//push button 1 ~ 4번까지 인터럽트 활성화. 5번부터는 E포트 써야함
{
	EICRA = (1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10 | 1 << ISC21 | 1 << ISC20 | 1 << ISC31 | 1 << ISC30);
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC41 | 1 << ISC40 | 1 << ISC51 | 1 << ISC50 | 1 << ISC61 | 1 << ISC60 | 1 << ISC71 | 1 << ISC70);
     5e4:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT0 | 1 << INT1 | 1 << INT2 | 1 << INT3 | 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7);
     5e6:	89 bf       	out	0x39, r24	; 57
	sei();
     5e8:	78 94       	sei
     5ea:	08 95       	ret

000005ec <Lock_int>:
}

void Lock_int()		//push button 비활성화
{
	EIMSK &= ~(1 << INT0 | 1 << INT1 | 1 << INT2 | 1 << INT3 | 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7);
     5ec:	89 b7       	in	r24, 0x39	; 57
     5ee:	19 be       	out	0x39, r1	; 57
     5f0:	08 95       	ret

000005f2 <Clear_curr>:
#include <util/delay.h>

person* root = NULL;

void Clear_curr(person* curr)
{
     5f2:	fc 01       	movw	r30, r24
	
	if(curr->prev != NULL) curr->prev->next = curr->next;
     5f4:	a0 8d       	ldd	r26, Z+24	; 0x18
     5f6:	b1 8d       	ldd	r27, Z+25	; 0x19
     5f8:	10 97       	sbiw	r26, 0x00	; 0
     5fa:	31 f0       	breq	.+12     	; 0x608 <Clear_curr+0x16>
     5fc:	86 89       	ldd	r24, Z+22	; 0x16
     5fe:	97 89       	ldd	r25, Z+23	; 0x17
     600:	57 96       	adiw	r26, 0x17	; 23
     602:	9c 93       	st	X, r25
     604:	8e 93       	st	-X, r24
     606:	56 97       	sbiw	r26, 0x16	; 22
	if(curr->next != NULL) curr->next->prev = curr->prev;
     608:	a6 89       	ldd	r26, Z+22	; 0x16
     60a:	b7 89       	ldd	r27, Z+23	; 0x17
     60c:	10 97       	sbiw	r26, 0x00	; 0
     60e:	31 f0       	breq	.+12     	; 0x61c <Clear_curr+0x2a>
     610:	80 8d       	ldd	r24, Z+24	; 0x18
     612:	91 8d       	ldd	r25, Z+25	; 0x19
     614:	59 96       	adiw	r26, 0x19	; 25
     616:	9c 93       	st	X, r25
     618:	8e 93       	st	-X, r24
     61a:	58 97       	sbiw	r26, 0x18	; 24
	
	curr->next = NULL;
     61c:	17 8a       	std	Z+23, r1	; 0x17
     61e:	16 8a       	std	Z+22, r1	; 0x16
	curr->prev = NULL;
     620:	11 8e       	std	Z+25, r1	; 0x19
     622:	10 8e       	std	Z+24, r1	; 0x18
     624:	08 95       	ret

00000626 <Enroll>:
}

void Enroll(char name[], int state, person* head)
{
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	6c 01       	movw	r12, r24
     638:	7b 01       	movw	r14, r22
     63a:	ea 01       	movw	r28, r20
	person* enroll = (person*)malloc(sizeof(person));
     63c:	8a e1       	ldi	r24, 0x1A	; 26
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	72 d5       	rcall	.+2788   	; 0x1126 <malloc>
     642:	8c 01       	movw	r16, r24
	
	if (enroll != NULL) {
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	59 f0       	breq	.+22     	; 0x65e <Enroll+0x38>
		strcpy(enroll->name, name);
     648:	b6 01       	movw	r22, r12
     64a:	97 d6       	rcall	.+3374   	; 0x137a <strcpy>
		enroll->state = state;
     64c:	f8 01       	movw	r30, r16
     64e:	f5 8a       	std	Z+21, r15	; 0x15
     650:	e4 8a       	std	Z+20, r14	; 0x14
		enroll->next = NULL;
     652:	17 8a       	std	Z+23, r1	; 0x17
     654:	16 8a       	std	Z+22, r1	; 0x16
		enroll->prev = NULL;
     656:	11 8e       	std	Z+25, r1	; 0x19
     658:	10 8e       	std	Z+24, r1	; 0x18
	}
	
	person* curr;
	curr = head;
	
	while(curr->next != NULL)
     65a:	01 c0       	rjmp	.+2      	; 0x65e <Enroll+0x38>
	{
		curr = curr->next;
     65c:	ec 01       	movw	r28, r24
	}
	
	person* curr;
	curr = head;
	
	while(curr->next != NULL)
     65e:	8e 89       	ldd	r24, Y+22	; 0x16
     660:	9f 89       	ldd	r25, Y+23	; 0x17
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	d9 f7       	brne	.-10     	; 0x65c <Enroll+0x36>
	{
		curr = curr->next;
	}
	
	curr -> next = enroll;
     666:	1f 8b       	std	Y+23, r17	; 0x17
     668:	0e 8b       	std	Y+22, r16	; 0x16
	enroll -> prev = curr;
     66a:	f8 01       	movw	r30, r16
     66c:	d1 8f       	std	Z+25, r29	; 0x19
     66e:	c0 8f       	std	Z+24, r28	; 0x18
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	08 95       	ret

00000682 <Delete>:

void Delete(char* name, person* head)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	8c 01       	movw	r16, r24
     68c:	eb 01       	movw	r28, r22
	person* curr;
	curr = head;
	
	if (head->next == NULL) {USART0_str("There is nobody in list\r\n"); return;}
     68e:	8e 89       	ldd	r24, Y+22	; 0x16
     690:	9f 89       	ldd	r25, Y+23	; 0x17
     692:	89 2b       	or	r24, r25
     694:	61 f4       	brne	.+24     	; 0x6ae <Delete+0x2c>
     696:	8a eb       	ldi	r24, 0xBA	; 186
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	c1 d4       	rcall	.+2434   	; 0x101e <USART0_str>
     69c:	22 c0       	rjmp	.+68     	; 0x6e2 <Delete+0x60>
	
	while (curr != NULL)	// curr이 마지막 객체까지 name과 같은 이름을 가진 객체가 있나 비교하며 이동
	{
		if (strcmp((char*)curr->name, (char*)name) == 0) break;
     69e:	b8 01       	movw	r22, r16
     6a0:	ce 01       	movw	r24, r28
     6a2:	62 d6       	rcall	.+3268   	; 0x1368 <strcmp>
     6a4:	89 2b       	or	r24, r25
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <Delete+0x30>
		curr = curr->next;
     6a8:	0e 88       	ldd	r0, Y+22	; 0x16
     6aa:	df 89       	ldd	r29, Y+23	; 0x17
     6ac:	c0 2d       	mov	r28, r0
	person* curr;
	curr = head;
	
	if (head->next == NULL) {USART0_str("There is nobody in list\r\n"); return;}
	
	while (curr != NULL)	// curr이 마지막 객체까지 name과 같은 이름을 가진 객체가 있나 비교하며 이동
     6ae:	20 97       	sbiw	r28, 0x00	; 0
     6b0:	b1 f7       	brne	.-20     	; 0x69e <Delete+0x1c>
	{
		if (strcmp((char*)curr->name, (char*)name) == 0) break;
		curr = curr->next;
	}
	
	if(curr == NULL)
     6b2:	20 97       	sbiw	r28, 0x00	; 0
     6b4:	49 f4       	brne	.+18     	; 0x6c8 <Delete+0x46>
	{	USART0_str(" ");
     6b6:	8a ee       	ldi	r24, 0xEA	; 234
     6b8:	94 e0       	ldi	r25, 0x04	; 4
		USART0_str(name);
     6ba:	b1 d4       	rcall	.+2402   	; 0x101e <USART0_str>
     6bc:	c8 01       	movw	r24, r16
		USART0_str(" is not existed\r\n");
     6be:	af d4       	rcall	.+2398   	; 0x101e <USART0_str>
     6c0:	84 ed       	ldi	r24, 0xD4	; 212
     6c2:	91 e0       	ldi	r25, 0x01	; 1
		return;
     6c4:	ac d4       	rcall	.+2392   	; 0x101e <USART0_str>
	}
	
	if(strcmp(curr->name, name)==0)
     6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <Delete+0x60>
     6c8:	b8 01       	movw	r22, r16
     6ca:	ce 01       	movw	r24, r28
     6cc:	4d d6       	rcall	.+3226   	; 0x1368 <strcmp>
	{
		Clear_curr(curr);
     6ce:	89 2b       	or	r24, r25
     6d0:	29 f4       	brne	.+10     	; 0x6dc <Delete+0x5a>
		free(curr);	
     6d2:	ce 01       	movw	r24, r28
     6d4:	8e df       	rcall	.-228    	; 0x5f2 <Clear_curr>
     6d6:	ce 01       	movw	r24, r28
		return;
     6d8:	be d5       	rcall	.+2940   	; 0x1256 <free>
	}
	
	USART0_str("Error\r\n");
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <Delete+0x60>
     6dc:	86 ee       	ldi	r24, 0xE6	; 230
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	9e d4       	rcall	.+2364   	; 0x101e <USART0_str>
	return;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <Toggle>:

void Toggle(char* name, person* head)
{
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	8c 01       	movw	r16, r24
     6f6:	eb 01       	movw	r28, r22
	person* curr;
	curr = head;
	
	if (head->next == NULL) {USART0_str("There is nobody in list\r\n"); return;}
     6f8:	8e 89       	ldd	r24, Y+22	; 0x16
     6fa:	9f 89       	ldd	r25, Y+23	; 0x17
     6fc:	89 2b       	or	r24, r25
     6fe:	61 f4       	brne	.+24     	; 0x718 <Toggle+0x2c>
     700:	8a eb       	ldi	r24, 0xBA	; 186
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	8c d4       	rcall	.+2328   	; 0x101e <USART0_str>
     706:	2c c0       	rjmp	.+88     	; 0x760 <Toggle+0x74>
	
	while (curr != NULL)	// curr이 마지막 객체까지 name과 같은 이름을 가진 객체가 있나 비교하며 이동
	{
		if (strcmp(curr->name, name) == 0) break;
     708:	b8 01       	movw	r22, r16
     70a:	ce 01       	movw	r24, r28
     70c:	2d d6       	rcall	.+3162   	; 0x1368 <strcmp>
     70e:	89 2b       	or	r24, r25
     710:	29 f0       	breq	.+10     	; 0x71c <Toggle+0x30>
		curr = curr->next;
     712:	0e 88       	ldd	r0, Y+22	; 0x16
     714:	df 89       	ldd	r29, Y+23	; 0x17
     716:	c0 2d       	mov	r28, r0
	person* curr;
	curr = head;
	
	if (head->next == NULL) {USART0_str("There is nobody in list\r\n"); return;}
	
	while (curr != NULL)	// curr이 마지막 객체까지 name과 같은 이름을 가진 객체가 있나 비교하며 이동
     718:	20 97       	sbiw	r28, 0x00	; 0
     71a:	b1 f7       	brne	.-20     	; 0x708 <Toggle+0x1c>
	{
		if (strcmp(curr->name, name) == 0) break;
		curr = curr->next;
	}
	
	if(curr == NULL)
     71c:	20 97       	sbiw	r28, 0x00	; 0
     71e:	49 f4       	brne	.+18     	; 0x732 <Toggle+0x46>
	{	USART0_str(" ");
     720:	8a ee       	ldi	r24, 0xEA	; 234
     722:	94 e0       	ldi	r25, 0x04	; 4
		USART0_str(name);
     724:	7c d4       	rcall	.+2296   	; 0x101e <USART0_str>
     726:	c8 01       	movw	r24, r16
		USART0_str(" is not existed\r\n");
     728:	7a d4       	rcall	.+2292   	; 0x101e <USART0_str>
     72a:	84 ed       	ldi	r24, 0xD4	; 212
     72c:	91 e0       	ldi	r25, 0x01	; 1
		return;
     72e:	77 d4       	rcall	.+2286   	; 0x101e <USART0_str>
	}
	
	if(strcmp(curr->name, name)==0)
     730:	17 c0       	rjmp	.+46     	; 0x760 <Toggle+0x74>
     732:	b8 01       	movw	r22, r16
     734:	ce 01       	movw	r24, r28
     736:	18 d6       	rcall	.+3120   	; 0x1368 <strcmp>
     738:	89 2b       	or	r24, r25
     73a:	79 f4       	brne	.+30     	; 0x75a <Toggle+0x6e>
	{
		if (curr->state ==0) {curr->state = 1;}
     73c:	8c 89       	ldd	r24, Y+20	; 0x14
     73e:	9d 89       	ldd	r25, Y+21	; 0x15
     740:	89 2b       	or	r24, r25
     742:	29 f4       	brne	.+10     	; 0x74e <Toggle+0x62>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	9d 8b       	std	Y+21, r25	; 0x15
     74a:	8c 8b       	std	Y+20, r24	; 0x14
		else curr->state = 0;
     74c:	02 c0       	rjmp	.+4      	; 0x752 <Toggle+0x66>
     74e:	1d 8a       	std	Y+21, r1	; 0x15
		
		USART0_str("State changed \r\n");
     750:	1c 8a       	std	Y+20, r1	; 0x14
     752:	8e ee       	ldi	r24, 0xEE	; 238
     754:	91 e0       	ldi	r25, 0x01	; 1
		return;
     756:	63 d4       	rcall	.+2246   	; 0x101e <USART0_str>
	}
	
	USART0_str("Error\r\n");
     758:	03 c0       	rjmp	.+6      	; 0x760 <Toggle+0x74>
     75a:	86 ee       	ldi	r24, 0xE6	; 230
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	5f d4       	rcall	.+2238   	; 0x101e <USART0_str>
	return;
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <print_list>:

void print_list(person* head)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
	if (head->next == NULL)
     76e:	fc 01       	movw	r30, r24
     770:	c6 89       	ldd	r28, Z+22	; 0x16
     772:	d7 89       	ldd	r29, Z+23	; 0x17
     774:	20 97       	sbiw	r28, 0x00	; 0
     776:	09 f5       	brne	.+66     	; 0x7ba <print_list+0x50>
	{
		USART0_str("List Not existed\r\n");
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	50 d4       	rcall	.+2208   	; 0x101e <USART0_str>
		return;
     77e:	1f c0       	rjmp	.+62     	; 0x7be <print_list+0x54>
	}
	person* curr = head;
	curr = curr->next;
	while(curr !=NULL)
	{
		USART0_str("\r\n Name :");
     780:	82 e1       	ldi	r24, 0x12	; 18
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	4c d4       	rcall	.+2200   	; 0x101e <USART0_str>
		USART0_str(curr->name);
     786:	ce 01       	movw	r24, r28
     788:	4a d4       	rcall	.+2196   	; 0x101e <USART0_str>
     78a:	8c 89       	ldd	r24, Y+20	; 0x14
		
		if (curr->state == 1)
     78c:	9d 89       	ldd	r25, Y+21	; 0x15
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	91 05       	cpc	r25, r1
     792:	21 f4       	brne	.+8      	; 0x79c <print_list+0x32>
		USART0_str(" is existed\r\n");
     794:	8c e1       	ldi	r24, 0x1C	; 28
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	42 d4       	rcall	.+2180   	; 0x101e <USART0_str>
     79a:	09 c0       	rjmp	.+18     	; 0x7ae <print_list+0x44>
     79c:	89 2b       	or	r24, r25
		else if (curr->state == 0)
     79e:	21 f4       	brne	.+8      	; 0x7a8 <print_list+0x3e>
		USART0_str(" is not existed\r\n");
     7a0:	84 ed       	ldi	r24, 0xD4	; 212
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	3c d4       	rcall	.+2168   	; 0x101e <USART0_str>
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <print_list+0x44>
		
		else
		USART0_str("Unknown");
     7a8:	8a e2       	ldi	r24, 0x2A	; 42
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	38 d4       	rcall	.+2160   	; 0x101e <USART0_str>
		USART0_str("\r\n");
     7ae:	82 e7       	ldi	r24, 0x72	; 114
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	35 d4       	rcall	.+2154   	; 0x101e <USART0_str>
     7b4:	0e 88       	ldd	r0, Y+22	; 0x16
		curr = curr->next;
     7b6:	df 89       	ldd	r29, Y+23	; 0x17
     7b8:	c0 2d       	mov	r28, r0
     7ba:	20 97       	sbiw	r28, 0x00	; 0
		USART0_str("List Not existed\r\n");
		return;
	}
	person* curr = head;
	curr = curr->next;
	while(curr !=NULL)
     7bc:	09 f7       	brne	.-62     	; 0x780 <print_list+0x16>
     7be:	df 91       	pop	r29
		else
		USART0_str("Unknown");
		USART0_str("\r\n");
		curr = curr->next;
	}
}
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <person_LCD>:
     7c4:	0f 93       	push	r16

int person_LCD(int index, person* head)
{
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	8b 01       	movw	r16, r22
	person* curr = head->next;
     7ce:	fb 01       	movw	r30, r22
     7d0:	c6 89       	ldd	r28, Z+22	; 0x16
     7d2:	d7 89       	ldd	r29, Z+23	; 0x17

	if (curr == NULL) {
     7d4:	20 97       	sbiw	r28, 0x00	; 0
     7d6:	81 f4       	brne	.+32     	; 0x7f8 <person_LCD+0x34>
		LCD_strout(0, 0, "No Members!");
     7d8:	42 e3       	ldi	r20, 0x32	; 50
     7da:	52 e0       	ldi	r21, 0x02	; 2
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	dc d0       	rcall	.+440    	; 0x99e <LCD_strout>
		return 1;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	5a c0       	rjmp	.+180    	; 0x8a0 <person_LCD+0xdc>
	}

	int i;
	for (i = 0; i < index && curr != NULL; i++)
	curr = curr->next;
     7ec:	0e 88       	ldd	r0, Y+22	; 0x16
     7ee:	df 89       	ldd	r29, Y+23	; 0x17
     7f0:	c0 2d       	mov	r28, r0
		LCD_strout(0, 0, "No Members!");
		return 1;
	}

	int i;
	for (i = 0; i < index && curr != NULL; i++)
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <person_LCD+0x38>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	28 17       	cp	r18, r24
     7fe:	39 07       	cpc	r19, r25
     800:	14 f4       	brge	.+4      	; 0x806 <person_LCD+0x42>
     802:	20 97       	sbiw	r28, 0x00	; 0
     804:	99 f7       	brne	.-26     	; 0x7ec <person_LCD+0x28>
	curr = curr->next;

	if (curr == NULL) {
     806:	20 97       	sbiw	r28, 0x00	; 0
     808:	51 f4       	brne	.+20     	; 0x81e <person_LCD+0x5a>
		LCD_strout(0, 0, "Final list");
     80a:	4e e3       	ldi	r20, 0x3E	; 62
     80c:	52 e0       	ldi	r21, 0x02	; 2
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	c3 d0       	rcall	.+390    	; 0x99e <LCD_strout>
		return 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	41 c0       	rjmp	.+130    	; 0x8a0 <person_LCD+0xdc>
	}

	LCD_strout(0, 0, curr->name);
     81e:	ae 01       	movw	r20, r28
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	ba d0       	rcall	.+372    	; 0x99e <LCD_strout>
	if(!(curr->state))
     82a:	8c 89       	ldd	r24, Y+20	; 0x14
     82c:	9d 89       	ldd	r25, Y+21	; 0x15
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	41 f4       	brne	.+16     	; 0x842 <person_LCD+0x7e>
	{
		LCD_strout(0, 13, "OUT");
     832:	49 e4       	ldi	r20, 0x49	; 73
     834:	52 e0       	ldi	r21, 0x02	; 2
     836:	6d e0       	ldi	r22, 0x0D	; 13
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	af d0       	rcall	.+350    	; 0x99e <LCD_strout>
     840:	09 c0       	rjmp	.+18     	; 0x854 <person_LCD+0x90>
	}
	else if(curr->state)
     842:	89 2b       	or	r24, r25
     844:	39 f0       	breq	.+14     	; 0x854 <person_LCD+0x90>
	{
		LCD_strout(0, 13, "IN");
     846:	4d e4       	ldi	r20, 0x4D	; 77
     848:	52 e0       	ldi	r21, 0x02	; 2
     84a:	6d e0       	ldi	r22, 0x0D	; 13
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a5 d0       	rcall	.+330    	; 0x99e <LCD_strout>
	}

	if (curr->next == NULL)
     854:	8e 89       	ldd	r24, Y+22	; 0x16
     856:	9f 89       	ldd	r25, Y+23	; 0x17
     858:	89 2b       	or	r24, r25
     85a:	51 f4       	brne	.+20     	; 0x870 <person_LCD+0xac>
	LCD_strout(1, 0, "Final list");
     85c:	4e e3       	ldi	r20, 0x3E	; 62
     85e:	52 e0       	ldi	r21, 0x02	; 2
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9a d0       	rcall	.+308    	; 0x99e <LCD_strout>
	else if (curr->prev == head)
	LCD_strout(1, 0, "First list");
	else
	LCD_strout(1, 0, "             ");

	return 0;
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	18 c0       	rjmp	.+48     	; 0x8a0 <person_LCD+0xdc>
		LCD_strout(0, 13, "IN");
	}

	if (curr->next == NULL)
	LCD_strout(1, 0, "Final list");
	else if (curr->prev == head)
     870:	88 8d       	ldd	r24, Y+24	; 0x18
     872:	99 8d       	ldd	r25, Y+25	; 0x19
     874:	08 17       	cp	r16, r24
     876:	19 07       	cpc	r17, r25
     878:	51 f4       	brne	.+20     	; 0x88e <person_LCD+0xca>
	LCD_strout(1, 0, "First list");
     87a:	40 e5       	ldi	r20, 0x50	; 80
     87c:	52 e0       	ldi	r21, 0x02	; 2
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	8b d0       	rcall	.+278    	; 0x99e <LCD_strout>
	else
	LCD_strout(1, 0, "             ");

	return 0;
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
	if (curr->next == NULL)
	LCD_strout(1, 0, "Final list");
	else if (curr->prev == head)
	LCD_strout(1, 0, "First list");
	else
	LCD_strout(1, 0, "             ");
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <person_LCD+0xdc>
     88e:	4e ed       	ldi	r20, 0xDE	; 222
     890:	54 e0       	ldi	r21, 0x04	; 4
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	81 d0       	rcall	.+258    	; 0x99e <LCD_strout>

	return 0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <PortInit>:
#include "LCD.h"
#include <string.h>

void PortInit(void)		//LCD용 포트 초기 세팅
{
	DDRC = 0xFF;	//DDRC로		화면 출력용
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x07;	//DDRB로		RS RW E 세팅
     8ae:	87 e0       	ldi	r24, 0x07	; 7
     8b0:	87 bb       	out	0x17, r24	; 23
     8b2:	08 95       	ret

000008b4 <LCD_Data>:

}

void LCD_Data(Byte ch)
{
	LCD_CTRL |= (1 << LCD_RS);
     8b4:	98 b3       	in	r25, 0x18	; 24
     8b6:	91 60       	ori	r25, 0x01	; 1
     8b8:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL &= ~(1 << LCD_RW);
     8ba:	98 b3       	in	r25, 0x18	; 24
     8bc:	9d 7f       	andi	r25, 0xFD	; 253
     8be:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL |= (1 << LCD_EN);
     8c0:	98 b3       	in	r25, 0x18	; 24
     8c2:	94 60       	ori	r25, 0x04	; 4
     8c4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	96 ef       	ldi	r25, 0xF6	; 246
     8c8:	9a 95       	dec	r25
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <LCD_Data+0x14>
	_delay_us(50);
	LCD_WDATA = ch;
     8cc:	85 bb       	out	0x15, r24	; 21
     8ce:	86 ef       	ldi	r24, 0xF6	; 246
     8d0:	8a 95       	dec	r24
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <LCD_Data+0x1c>
	_delay_us(50);
	LCD_CTRL &= ~(1 << LCD_EN);
     8d4:	88 b3       	in	r24, 0x18	; 24
     8d6:	8b 7f       	andi	r24, 0xFB	; 251
     8d8:	88 bb       	out	0x18, r24	; 24
     8da:	08 95       	ret

000008dc <LCD_Comm>:
}

void LCD_Comm(Byte ch)
{
	LCD_CTRL &= ~(1 << LCD_RS);
     8dc:	98 b3       	in	r25, 0x18	; 24
     8de:	9e 7f       	andi	r25, 0xFE	; 254
     8e0:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL &= ~(1 << LCD_RW);
     8e2:	98 b3       	in	r25, 0x18	; 24
     8e4:	9d 7f       	andi	r25, 0xFD	; 253
     8e6:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL |= (1 << LCD_EN);
     8e8:	98 b3       	in	r25, 0x18	; 24
     8ea:	94 60       	ori	r25, 0x04	; 4
     8ec:	98 bb       	out	0x18, r25	; 24
     8ee:	96 ef       	ldi	r25, 0xF6	; 246
     8f0:	9a 95       	dec	r25
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_Comm+0x14>
	_delay_us(50);
	LCD_WINST = ch;
     8f4:	85 bb       	out	0x15, r24	; 21
     8f6:	86 ef       	ldi	r24, 0xF6	; 246
     8f8:	8a 95       	dec	r24
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <LCD_Comm+0x1c>
	_delay_us(50);
	LCD_CTRL &= ~(1 << LCD_EN);
     8fc:	88 b3       	in	r24, 0x18	; 24
     8fe:	8b 7f       	andi	r24, 0xFB	; 251
     900:	88 bb       	out	0x18, r24	; 24
     902:	08 95       	ret

00000904 <LCD_CHAR>:
}

void LCD_CHAR(Byte c)
{

	LCD_Data(c);
     904:	d7 df       	rcall	.-82     	; 0x8b4 <LCD_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     906:	86 e6       	ldi	r24, 0x66	; 102
     908:	9e e0       	ldi	r25, 0x0E	; 14
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <LCD_CHAR+0x6>
     90e:	00 00       	nop
     910:	08 95       	ret

00000912 <LCD_STR>:
	_delay_ms(1);
}

void LCD_STR(Byte* str)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
	while (*str != 0)
     918:	02 c0       	rjmp	.+4      	; 0x91e <LCD_STR+0xc>
	{
		LCD_CHAR(*str);
     91a:	f4 df       	rcall	.-24     	; 0x904 <LCD_CHAR>
		str++;
     91c:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_STR(Byte* str)
{
	while (*str != 0)
     91e:	88 81       	ld	r24, Y
     920:	81 11       	cpse	r24, r1
     922:	fb cf       	rjmp	.-10     	; 0x91a <LCD_STR+0x8>
	{
		LCD_CHAR(*str);
		str++;
	}
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <LCD_pos>:

void LCD_pos(unsigned char col, unsigned char row)
{

	LCD_Comm(0x80 | (row + col * 0x40));
     92a:	90 e4       	ldi	r25, 0x40	; 64
     92c:	89 9f       	mul	r24, r25
     92e:	60 0d       	add	r22, r0
     930:	11 24       	eor	r1, r1
     932:	86 2f       	mov	r24, r22
     934:	80 68       	ori	r24, 0x80	; 128
     936:	d2 cf       	rjmp	.-92     	; 0x8dc <LCD_Comm>
     938:	08 95       	ret

0000093a <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_Comm(0x01);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	cf df       	rcall	.-98     	; 0x8dc <LCD_Comm>
     93e:	89 e9       	ldi	r24, 0x99	; 153
     940:	99 e3       	ldi	r25, 0x39	; 57
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <LCD_Clear+0x8>
     946:	00 c0       	rjmp	.+0      	; 0x948 <LCD_Clear+0xe>
     948:	08 95       	ret

0000094a <LCD_Init>:
	_delay_ms(4);
}

void LCD_Init(void)
{
	LCD_Comm(0x38);
     94a:	88 e3       	ldi	r24, 0x38	; 56
     94c:	c7 df       	rcall	.-114    	; 0x8dc <LCD_Comm>
     94e:	8c ec       	ldi	r24, 0xCC	; 204
     950:	9c e1       	ldi	r25, 0x1C	; 28
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <LCD_Init+0x8>
     956:	00 c0       	rjmp	.+0      	; 0x958 <LCD_Init+0xe>
     958:	00 00       	nop
	_delay_ms(2);
	LCD_Comm(0x38);
     95a:	88 e3       	ldi	r24, 0x38	; 56
     95c:	bf df       	rcall	.-130    	; 0x8dc <LCD_Comm>
     95e:	8c ec       	ldi	r24, 0xCC	; 204
     960:	9c e1       	ldi	r25, 0x1C	; 28
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <LCD_Init+0x18>
     966:	00 c0       	rjmp	.+0      	; 0x968 <LCD_Init+0x1e>
	_delay_ms(2);
	LCD_Comm(0x38);
     968:	00 00       	nop
     96a:	88 e3       	ldi	r24, 0x38	; 56
     96c:	b7 df       	rcall	.-146    	; 0x8dc <LCD_Comm>
     96e:	8c ec       	ldi	r24, 0xCC	; 204
     970:	9c e1       	ldi	r25, 0x1C	; 28
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <LCD_Init+0x28>
     976:	00 c0       	rjmp	.+0      	; 0x978 <LCD_Init+0x2e>
	_delay_ms(2);
	LCD_Comm(0x0e);
     978:	00 00       	nop
     97a:	8e e0       	ldi	r24, 0x0E	; 14
     97c:	af df       	rcall	.-162    	; 0x8dc <LCD_Comm>
     97e:	8c ec       	ldi	r24, 0xCC	; 204
     980:	9c e1       	ldi	r25, 0x1C	; 28
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <LCD_Init+0x38>
     986:	00 c0       	rjmp	.+0      	; 0x988 <LCD_Init+0x3e>
	_delay_ms(2);
	LCD_Comm(0x06);
     988:	00 00       	nop
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	a7 df       	rcall	.-178    	; 0x8dc <LCD_Comm>
     98e:	8c ec       	ldi	r24, 0xCC	; 204
     990:	9c e1       	ldi	r25, 0x1C	; 28
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <LCD_Init+0x48>
     996:	00 c0       	rjmp	.+0      	; 0x998 <LCD_Init+0x4e>
	_delay_ms(2);
	LCD_Clear();
     998:	00 00       	nop
     99a:	cf cf       	rjmp	.-98     	; 0x93a <LCD_Clear>
     99c:	08 95       	ret

0000099e <LCD_strout>:
}

void LCD_strout(int line, int location, char* message)
{
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	2c 97       	sbiw	r28, 0x0c	; 12
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	18 2f       	mov	r17, r24
     9bc:	06 2f       	mov	r16, r22
     9be:	7a 01       	movw	r14, r20
	char blank[] = "           ";
     9c0:	8c e0       	ldi	r24, 0x0C	; 12
     9c2:	e0 ee       	ldi	r30, 0xE0	; 224
     9c4:	f4 e0       	ldi	r31, 0x04	; 4
     9c6:	de 01       	movw	r26, r28
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	01 90       	ld	r0, Z+
     9cc:	0d 92       	st	X+, r0
     9ce:	8a 95       	dec	r24
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <LCD_strout+0x2c>
	LCD_pos(line, location);
     9d2:	81 2f       	mov	r24, r17
     9d4:	aa df       	rcall	.-172    	; 0x92a <LCD_pos>
	LCD_STR((Byte*)blank);
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	9b df       	rcall	.-202    	; 0x912 <LCD_STR>
	LCD_pos(line, location);
     9dc:	60 2f       	mov	r22, r16
     9de:	81 2f       	mov	r24, r17
	LCD_STR((Byte*)message);
     9e0:	a4 df       	rcall	.-184    	; 0x92a <LCD_pos>
     9e2:	c7 01       	movw	r24, r14
     9e4:	96 df       	rcall	.-212    	; 0x912 <LCD_STR>
}
     9e6:	2c 96       	adiw	r28, 0x0c	; 12
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <LCD_charout>:

void LCD_charout(int line, int location, Byte message)
{
     a00:	cf 93       	push	r28
     a02:	c4 2f       	mov	r28, r20
	LCD_pos(line, location);
     a04:	92 df       	rcall	.-220    	; 0x92a <LCD_pos>
	LCD_CHAR(message);
     a06:	8c 2f       	mov	r24, r28
     a08:	7d df       	rcall	.-262    	; 0x904 <LCD_CHAR>
}
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <main>:

#include "system/system.h"

int main(void)
{
	Init_system();
     a0e:	8a d1       	rcall	.+788    	; 0xd24 <Init_system>
	Lock_int(); // 시스템 포맷은 했지만 처음엔 초소 버튼 입력이 필요치 않으므로 추후에 다시 초기화하기
     a10:	ed dd       	rcall	.-1062   	; 0x5ec <Lock_int>
     a12:	8a e1       	ldi	r24, 0x1A	; 26

	

	root = (person*)malloc(sizeof(person));
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	87 d3       	rcall	.+1806   	; 0x1126 <malloc>
     a18:	fc 01       	movw	r30, r24
     a1a:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <root+0x1>
     a1e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <root>
     a22:	10 82       	st	Z, r1

	strcpy(root->name, "");
     a24:	15 8a       	std	Z+21, r1	; 0x15
	root->state = 0;
     a26:	14 8a       	std	Z+20, r1	; 0x14
     a28:	17 8a       	std	Z+23, r1	; 0x17
	root->next = NULL;
     a2a:	16 8a       	std	Z+22, r1	; 0x16
     a2c:	11 8e       	std	Z+25, r1	; 0x19
	root->prev = NULL;
     a2e:	10 8e       	std	Z+24, r1	; 0x18

	Rflag = 0;
     a30:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
	clear_terminal();
	
	system_loading();
     a34:	2f d3       	rcall	.+1630   	; 0x1094 <clear_terminal>
     a36:	7f d1       	rcall	.+766    	; 0xd36 <system_loading>
	
	while (1) {
		login();
     a38:	98 d1       	rcall	.+816    	; 0xd6a <login>
     a3a:	d1 dd       	rcall	.-1118   	; 0x5de <Init_int>
		Init_int();
     a3c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <locked>
		while (1)
		{	
			if (locked == 1) break;
     a40:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <locked+0x1>
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	c1 f3       	breq	.-16     	; 0xa38 <main+0x2a>
			char choiced = '0';
			USART0_str("\b\r\n\r\nWhat you want?\r\n1. Send Text 2. Send Light 3. Clear interface\r\n4. Add/Delete Member 5. Print Members 6. Toggle In/Out 7. change pass\r\n");
     a48:	8b e5       	ldi	r24, 0x5B	; 91
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	e8 d2       	rcall	.+1488   	; 0x101e <USART0_str>
     a4e:	87 e0       	ldi	r24, 0x07	; 7
			choiced = select(7);	//1~7의 선택지중 하나를 '1'같은 문자형태로 반환
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	c4 d1       	rcall	.+904    	; 0xddc <select>
     a54:	90 e0       	ldi	r25, 0x00	; 0
			switch (choiced)
     a56:	fc 01       	movw	r30, r24
     a58:	f1 97       	sbiw	r30, 0x31	; 49
     a5a:	e7 30       	cpi	r30, 0x07	; 7
     a5c:	f1 05       	cpc	r31, r1
     a5e:	10 f5       	brcc	.+68     	; 0xaa4 <main+0x96>
     a60:	ea 5b       	subi	r30, 0xBA	; 186
			{
			case '1':
				sendMessage();		//메시지 보내기
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	57 c3       	rjmp	.+1710   	; 0x1114 <__tablejump2__>
				break;

			case '2':
				remote_color();		// 초소 장비 color LED 색 제어
     a66:	21 d1       	rcall	.+578    	; 0xcaa <sendMessage>
				break;
     a68:	e9 cf       	rjmp	.-46     	; 0xa3c <main+0x2e>

			case '3':
				clear_terminal();	// 터미널 콘솔창 화면 비우기
     a6a:	d6 d1       	rcall	.+940    	; 0xe18 <remote_color>
     a6c:	e7 cf       	rjmp	.-50     	; 0xa3c <main+0x2e>
				break;

			case '4':
				Manage_Member();	//멤버관리(추가, 삭제)
     a6e:	12 d3       	rcall	.+1572   	; 0x1094 <clear_terminal>
     a70:	e5 cf       	rjmp	.-54     	; 0xa3c <main+0x2e>
				break;
				

			case '5':
				print_list(root);	//root에 등록되있는 모든 인원 출력
     a72:	db d1       	rcall	.+950    	; 0xe2a <Manage_Member>
     a74:	e3 cf       	rjmp	.-58     	; 0xa3c <main+0x2e>
     a76:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <root>
     a7a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <root+0x1>
				break;
     a7e:	75 de       	rcall	.-790    	; 0x76a <print_list>

			case '6':
				system_toggle();	//멤버의 state 변경
     a80:	dd cf       	rjmp	.-70     	; 0xa3c <main+0x2e>
     a82:	99 d1       	rcall	.+818    	; 0xdb6 <system_toggle>
				break;
     a84:	db cf       	rjmp	.-74     	; 0xa3c <main+0x2e>
				
			case '7':
				USART0_str("\bchange pass? 1.yes, 2.no\r\n");
     a86:	87 ee       	ldi	r24, 0xE7	; 231
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	c9 d2       	rcall	.+1426   	; 0x101e <USART0_str>
				choiced = select(2);
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a5 d1       	rcall	.+842    	; 0xddc <select>
     a92:	82 33       	cpi	r24, 0x32	; 50
				if(choiced == '2'){}
     a94:	99 f2       	breq	.-90     	; 0xa3c <main+0x2e>
     a96:	81 e0       	ldi	r24, 0x01	; 1
				else{locked = 1;}
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <locked+0x1>
     a9e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <locked>
     aa2:	cc cf       	rjmp	.-104    	; 0xa3c <main+0x2e>
     aa4:	83 e0       	ldi	r24, 0x03	; 3
				break;

			default:
				USART0_str("Wrong choice! Enter only numbers in menu!\r\n");
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	ba d2       	rcall	.+1396   	; 0x101e <USART0_str>
     aaa:	c8 cf       	rjmp	.-112    	; 0xa3c <main+0x2e>

00000aac <keypad_Init>:
int rows = -1;
int cols = -1;

void keypad_Init()
{
	DDRA = 0xF0;		//상위 니블은 출력, 하위 니블은 입력
     aac:	80 ef       	ldi	r24, 0xF0	; 240
     aae:	8a bb       	out	0x1a, r24	; 26
     ab0:	08 95       	ret

00000ab2 <find_ROWS>:
}

int find_ROWS(int temp)
{
	if ((temp & 0x01) == 1) return 0;
     ab2:	80 fd       	sbrc	r24, 0
     ab4:	09 c0       	rjmp	.+18     	; 0xac8 <find_ROWS+0x16>
	else if ((temp & 0x02) == 2) return 1;
     ab6:	81 fd       	sbrc	r24, 1
     ab8:	0a c0       	rjmp	.+20     	; 0xace <find_ROWS+0x1c>
	else if ((temp & 0x04) == 4) return 2;
     aba:	82 fd       	sbrc	r24, 2
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <find_ROWS+0x22>
	else if ((temp & 0x08) == 8) return 3;
     abe:	83 ff       	sbrs	r24, 3
     ac0:	0c c0       	rjmp	.+24     	; 0xada <find_ROWS+0x28>
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	08 95       	ret
	DDRA = 0xF0;		//상위 니블은 출력, 하위 니블은 입력
}

int find_ROWS(int temp)
{
	if ((temp & 0x01) == 1) return 0;
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 95       	ret
	else if ((temp & 0x02) == 2) return 1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	08 95       	ret
	else if ((temp & 0x04) == 4) return 2;
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	08 95       	ret
	else if ((temp & 0x08) == 8) return 3;
	else return -1;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ef       	ldi	r25, 0xFF	; 255
}
     ade:	08 95       	ret

00000ae0 <reset>:

void reset()
{
	rows = -1;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <rows+0x1>
     ae8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <rows>
	cols = -1;
     aec:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cols+0x1>
     af0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cols>
     af4:	08 95       	ret

00000af6 <findnumber>:
}

char findnumber()		// 입력된 문자의 행/렬 찾기용
{
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	for (int i = 0; i < 3; i++)
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	38 c0       	rjmp	.+112    	; 0xb74 <findnumber+0x7e>
	{
		PORTA |= (1 << (i + 4));
     b04:	8b b3       	in	r24, 0x1b	; 27
     b06:	98 01       	movw	r18, r16
     b08:	2c 5f       	subi	r18, 0xFC	; 252
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	c1 e0       	ldi	r28, 0x01	; 1
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <findnumber+0x20>
     b12:	cc 0f       	add	r28, r28
     b14:	dd 1f       	adc	r29, r29
     b16:	2a 95       	dec	r18
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <findnumber+0x1c>
     b1a:	8c 2b       	or	r24, r28
     b1c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1e:	48 e1       	ldi	r20, 0x18	; 24
     b20:	4a 95       	dec	r20
     b22:	f1 f7       	brne	.-4      	; 0xb20 <findnumber+0x2a>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <findnumber+0x30>
		_delay_us(5);
		temp = PINA;
     b26:	89 b3       	in	r24, 0x19	; 25
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <temp+0x1>
     b2e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <temp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	9f e8       	ldi	r25, 0x8F	; 143
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <findnumber+0x40>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <findnumber+0x46>
     b3c:	00 00       	nop
		_delay_ms(10);

		if (((temp & 0x01) == 0x01) || ((temp & 0x02) == 0x02) || ((temp & 0x04) == 0x04) || ((temp & 0x08) == 0x08))
     b3e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <temp>
     b42:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <temp+0x1>
     b46:	80 fd       	sbrc	r24, 0
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <findnumber+0x60>
     b4a:	81 fd       	sbrc	r24, 1
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <findnumber+0x60>
     b4e:	82 fd       	sbrc	r24, 2
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <findnumber+0x60>
     b52:	83 ff       	sbrs	r24, 3
     b54:	09 c0       	rjmp	.+18     	; 0xb68 <findnumber+0x72>
		{
			rows = find_ROWS(temp);
     b56:	ad df       	rcall	.-166    	; 0xab2 <find_ROWS>
     b58:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <rows+0x1>
     b5c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <rows>
			cols = i;
     b60:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <cols+0x1>
     b64:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <cols>
		}
		PORTA &= ~(1 << (i + 4));
     b68:	8b b3       	in	r24, 0x1b	; 27
     b6a:	c0 95       	com	r28
     b6c:	c8 23       	and	r28, r24
     b6e:	cb bb       	out	0x1b, r28	; 27
	cols = -1;
}

char findnumber()		// 입력된 문자의 행/렬 찾기용
{
	for (int i = 0; i < 3; i++)
     b70:	0f 5f       	subi	r16, 0xFF	; 255
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	03 30       	cpi	r16, 0x03	; 3
     b76:	11 05       	cpc	r17, r1
     b78:	2c f2       	brlt	.-118    	; 0xb04 <findnumber+0xe>
			cols = i;
		}
		PORTA &= ~(1 << (i + 4));
	}

	if ((rows == -1) || (cols == -1)) return '\0';
     b7a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <rows>
     b7e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rows+0x1>
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	92 07       	cpc	r25, r18
     b88:	a1 f0       	breq	.+40     	; 0xbb2 <findnumber+0xbc>
     b8a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <cols>
     b8e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <cols+0x1>
     b92:	2f 3f       	cpi	r18, 0xFF	; 255
     b94:	4f ef       	ldi	r20, 0xFF	; 255
     b96:	34 07       	cpc	r19, r20
     b98:	71 f0       	breq	.+28     	; 0xbb6 <findnumber+0xc0>

	return pads[rows][cols];
     b9a:	ac 01       	movw	r20, r24
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	84 0f       	add	r24, r20
     ba2:	95 1f       	adc	r25, r21
     ba4:	84 5c       	subi	r24, 0xC4	; 196
     ba6:	9c 4f       	sbci	r25, 0xFC	; 252
     ba8:	fc 01       	movw	r30, r24
     baa:	e2 0f       	add	r30, r18
     bac:	f3 1f       	adc	r31, r19
     bae:	80 81       	ld	r24, Z
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <findnumber+0xc2>
			cols = i;
		}
		PORTA &= ~(1 << (i + 4));
	}

	if ((rows == -1) || (cols == -1)) return '\0';
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <findnumber+0xc2>
     bb6:	80 e0       	ldi	r24, 0x00	; 0

	return pads[rows][cols];

}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <cp_pass>:



int cp_pass(char str[])		//UART의 check_pass()로 인해 생성된 pass배열을 이 함수를 통해 비교
{
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <cp_pass+0xe>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <cp_pass+0x10>
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	7c 01       	movw	r14, r24
	char arr[4];
	for (int k = 0; k < 4; k++)
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	1d c0       	rjmp	.+58     	; 0xc18 <cp_pass+0x56>
		char key = '\0';

		// 키 입력 대기 루프
		while (key == '\0')
		{
			key = findnumber();
     bde:	8b df       	rcall	.-234    	; 0xaf6 <findnumber>
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <cp_pass+0x22>
     be2:	80 e0       	ldi	r24, 0x00	; 0
	for (int k = 0; k < 4; k++)
	{
		char key = '\0';

		// 키 입력 대기 루프
		while (key == '\0')
     be4:	88 23       	and	r24, r24
     be6:	d9 f3       	breq	.-10     	; 0xbde <cp_pass+0x1c>
		{
			key = findnumber();
		}

		arr[k] = key;
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	e0 0f       	add	r30, r16
     bf2:	f1 1f       	adc	r31, r17
     bf4:	80 83       	st	Z, r24
		LCD_charout(0,k,arr[k]);
     bf6:	48 2f       	mov	r20, r24
     bf8:	b8 01       	movw	r22, r16
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
		reset();
     bfe:	00 df       	rcall	.-512    	; 0xa00 <LCD_charout>
     c00:	6f df       	rcall	.-290    	; 0xae0 <reset>
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	8f e7       	ldi	r24, 0x7F	; 127
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <cp_pass+0x46>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <cp_pass+0x50>
     c12:	00 00       	nop


int cp_pass(char str[])		//UART의 check_pass()로 인해 생성된 pass배열을 이 함수를 통해 비교
{
	char arr[4];
	for (int k = 0; k < 4; k++)
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	04 30       	cpi	r16, 0x04	; 4
     c1a:	11 05       	cpc	r17, r1
     c1c:	14 f3       	brlt	.-60     	; 0xbe2 <cp_pass+0x20>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	2c c0       	rjmp	.+88     	; 0xc7c <cp_pass+0xba>
		_delay_ms(100);
	}

	for (int t = 0; t < 4; t++)
	{
		if (arr[t] != str[t]) {
     c24:	e1 e0       	ldi	r30, 0x01	; 1
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	ec 0f       	add	r30, r28
     c2a:	fd 1f       	adc	r31, r29
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
     c30:	30 81       	ld	r19, Z
     c32:	f7 01       	movw	r30, r14
     c34:	e8 0f       	add	r30, r24
     c36:	f9 1f       	adc	r31, r25
     c38:	20 81       	ld	r18, Z
     c3a:	32 17       	cp	r19, r18

			USART0_str(arr);
     c3c:	f1 f0       	breq	.+60     	; 0xc7a <cp_pass+0xb8>
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
			USART0_str("is wrong! \r\n");
     c42:	ed d1       	rcall	.+986    	; 0x101e <USART0_str>
     c44:	8f e2       	ldi	r24, 0x2F	; 47
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	ea d1       	rcall	.+980    	; 0x101e <USART0_str>
			for (int i = 0; i < 4; i++)
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <cp_pass+0x9e>
			{
				arr[i] = '\0';
     c50:	e1 e0       	ldi	r30, 0x01	; 1
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ec 0f       	add	r30, r28
     c56:	fd 1f       	adc	r31, r29
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	10 82       	st	Z, r1
	{
		if (arr[t] != str[t]) {

			USART0_str(arr);
			USART0_str("is wrong! \r\n");
			for (int i = 0; i < 4; i++)
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	84 30       	cpi	r24, 0x04	; 4
     c62:	91 05       	cpc	r25, r1
     c64:	ac f3       	brlt	.-22     	; 0xc50 <cp_pass+0x8e>
			{
				arr[i] = '\0';
			}
			LCD_strout(0,0,"     ");
     c66:	46 ee       	ldi	r20, 0xE6	; 230
     c68:	54 e0       	ldi	r21, 0x04	; 4
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	95 de       	rcall	.-726    	; 0x99e <LCD_strout>
			return 0;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <cp_pass+0xd2>
		LCD_charout(0,k,arr[k]);
		reset();
		_delay_ms(100);
	}

	for (int t = 0; t < 4; t++)
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	91 05       	cpc	r25, r1
     c80:	8c f2       	brlt	.-94     	; 0xc24 <cp_pass+0x62>
			LCD_strout(0,0,"     ");
			return 0;
		}
	}
	
	LCD_strout(0,0,"     ");
     c82:	46 ee       	ldi	r20, 0xE6	; 230
     c84:	54 e0       	ldi	r21, 0x04	; 4
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	87 de       	rcall	.-754    	; 0x99e <LCD_strout>
	
	return 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	08 95       	ret

00000caa <sendMessage>:

#include "system.h"


void sendMessage()		//메뉴에서 1번 선택시 실행되는 함수
{
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
	Lock_int();			// 1번 사용동안 인터럽트 잠그기
     cb0:	9d dc       	rcall	.-1734   	; 0x5ec <Lock_int>
	USART0_str("\r\nType your Message\r\n");
     cb2:	88 e4       	ldi	r24, 0x48	; 72
     cb4:	93 e0       	ldi	r25, 0x03	; 3
	LCD_Init();			// 아래 코드까지 합쳐서 MCU장비의 Text LED에 메시지 쿨력
     cb6:	b3 d1       	rcall	.+870    	; 0x101e <USART0_str>
     cb8:	48 de       	rcall	.-880    	; 0x94a <LCD_Init>
	LCD_strout(1, 0, "Press 0 to Init");
     cba:	4b e5       	ldi	r20, 0x5B	; 91
     cbc:	51 e0       	ldi	r21, 0x01	; 1
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	6b de       	rcall	.-810    	; 0x99e <LCD_strout>

	int index = 0;
     cc8:	c0 e0       	ldi	r28, 0x00	; 0
     cca:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		while (Rflag == 0);
     ccc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <Rflag>
     cd0:	88 23       	and	r24, r24
     cd2:	e1 f3       	breq	.-8      	; 0xccc <sendMessage+0x22>
		char command = data;
     cd4:	10 91 76 05 	lds	r17, 0x0576	; 0x800576 <data>
		Rflag = 0;
     cd8:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
		LCD_pos(0, index);
     cdc:	6c 2f       	mov	r22, r28
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	24 de       	rcall	.-952    	; 0x92a <LCD_pos>
		if (command == '\r')  break;		// Enter 클릭시 '\r'을 읽게되고 이경우 break;
     ce2:	1d 30       	cpi	r17, 0x0D	; 13
     ce4:	b9 f0       	breq	.+46     	; 0xd14 <sendMessage+0x6a>
		// 백스페이스 사용시 터미널과 LCD에서 한칸씩 지우고 커서를 뒤로 한칸 되돌림
		if (command == 8) { if (index > 0) { index--; LCD_charout(0, index, ' '); LCD_pos(0, index);  Serial_Send(' '); Serial_Send('\b'); }  continue; }
     ce6:	18 30       	cpi	r17, 0x08	; 8
     ce8:	89 f4       	brne	.+34     	; 0xd0c <sendMessage+0x62>
     cea:	1c 16       	cp	r1, r28
     cec:	1d 06       	cpc	r1, r29
     cee:	74 f7       	brge	.-36     	; 0xccc <sendMessage+0x22>
     cf0:	21 97       	sbiw	r28, 0x01	; 1
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	be 01       	movw	r22, r28
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	82 de       	rcall	.-764    	; 0xa00 <LCD_charout>
     cfc:	6c 2f       	mov	r22, r28
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	14 de       	rcall	.-984    	; 0x92a <LCD_pos>
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	68 d1       	rcall	.+720    	; 0xfd6 <Serial_Send>
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	66 d1       	rcall	.+716    	; 0xfd6 <Serial_Send>
		LCD_CHAR(command);
     d0a:	e0 cf       	rjmp	.-64     	; 0xccc <sendMessage+0x22>
     d0c:	81 2f       	mov	r24, r17
     d0e:	fa dd       	rcall	.-1036   	; 0x904 <LCD_CHAR>
		index++;
     d10:	21 96       	adiw	r28, 0x01	; 1
     d12:	dc cf       	rjmp	.-72     	; 0xccc <sendMessage+0x22>

	}

	//Lock_int()로 잠근 인터럽트 다시 활성화
	Init_int();
     d14:	64 dc       	rcall	.-1848   	; 0x5de <Init_int>
     d16:	8e e5       	ldi	r24, 0x5E	; 94

	USART0_str("\r\n\r\nReturn to Menu\r\n\r\n");
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	81 d1       	rcall	.+770    	; 0x101e <USART0_str>
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
}
     d20:	1f 91       	pop	r17
     d22:	08 95       	ret

00000d24 <Init_system>:
     d24:	11 ba       	out	0x11, r1	; 17
     d26:	c1 dd       	rcall	.-1150   	; 0x8aa <PortInit>

void Init_system()
{
	DDRD = 0x00;
	PortInit();		// LCD용 초기 세팅
	LCD_Init();		// LCD 화면 클리어
     d28:	10 de       	rcall	.-992    	; 0x94a <LCD_Init>
	keypad_Init();	// keypad용 초기 세팅
     d2a:	c0 de       	rcall	.-640    	; 0xaac <keypad_Init>
	Init_timer();	// 타이머용 초기세팅
     d2c:	32 d1       	rcall	.+612    	; 0xf92 <Init_timer>
	Init_cds();		// cds(광센서)용 초기세팅
     d2e:	2b da       	rcall	.-2986   	; 0x186 <Init_cds>
     d30:	56 dc       	rcall	.-1876   	; 0x5de <Init_int>
	Init_int();		// 인터럽트용 초기세팅
     d32:	45 c1       	rjmp	.+650    	; 0xfbe <Init_USART>
     d34:	08 95       	ret

00000d36 <system_loading>:
	Init_USART();	// UART(하이퍼 터미널과 소통)용 초기 세팅함수
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
}

void system_loading()
{
	for (int i = 0; i < 5; i++) {
     d3c:	d0 e0       	ldi	r29, 0x00	; 0
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <system_loading+0x22>
		Serial_Send('=');
     d40:	8d e3       	ldi	r24, 0x3D	; 61
     d42:	49 d1       	rcall	.+658    	; 0xfd6 <Serial_Send>
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	98 e0       	ldi	r25, 0x08	; 8
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <system_loading+0x14>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <system_loading+0x1e>
     d54:	00 00       	nop
	Init_USART();	// UART(하이퍼 터미널과 소통)용 초기 세팅함수
}

void system_loading()
{
	for (int i = 0; i < 5; i++) {
     d56:	21 96       	adiw	r28, 0x01	; 1
     d58:	c5 30       	cpi	r28, 0x05	; 5
     d5a:	d1 05       	cpc	r29, r1
     d5c:	8c f3       	brlt	.-30     	; 0xd40 <system_loading+0xa>
		Serial_Send('=');
		_delay_ms(200);
	}
	USART0_str("\r\n");
     d5e:	82 e7       	ldi	r24, 0x72	; 114
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	5d d1       	rcall	.+698    	; 0x101e <USART0_str>
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <login>:

void login()
{
	check_pass();		// pass등록 함수. 4자리 숫자 제한
     d6a:	a2 d1       	rcall	.+836    	; 0x10b0 <check_pass>
	USART0_str("Enter password in repeater\r\n");
     d6c:	85 e7       	ldi	r24, 0x75	; 117
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	56 d1       	rcall	.+684    	; 0x101e <USART0_str>
	while (1) {
		cli();//pass를 인증하기 전까지 인터럽트 비활성화
     d72:	f8 94       	cli
		if (cp_pass(pass) == 1) { USART0_str("Correct pass!\r\n"); LCD_strout(1, 0, "ACCESS"); locked = 0; Init_buff(); break; } // 인증을 맞을 경우, 잠금 해제 + 쌓인 인터럽트 제거
     d74:	80 e7       	ldi	r24, 0x70	; 112
     d76:	95 e0       	ldi	r25, 0x05	; 5
     d78:	24 df       	rcall	.-440    	; 0xbc2 <cp_pass>
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	89 f4       	brne	.+34     	; 0xda0 <login+0x36>
     d7e:	82 e9       	ldi	r24, 0x92	; 146
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	4d d1       	rcall	.+666    	; 0x101e <USART0_str>
     d84:	42 ea       	ldi	r20, 0xA2	; 162
     d86:	53 e0       	ldi	r21, 0x03	; 3
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	06 de       	rcall	.-1012   	; 0x99e <LCD_strout>
     d92:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <locked+0x1>
     d96:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <locked>
     d9a:	4d d1       	rcall	.+666    	; 0x1036 <Init_buff>
     d9c:	78 94       	sei
		else { USART0_str("Wrong pass! retry\r\n"); LCD_strout(1, 0, "RETRY"); }
			
	}
	sei();
     d9e:	08 95       	ret
}
     da0:	89 ea       	ldi	r24, 0xA9	; 169
	check_pass();		// pass등록 함수. 4자리 숫자 제한
	USART0_str("Enter password in repeater\r\n");
	while (1) {
		cli();//pass를 인증하기 전까지 인터럽트 비활성화
		if (cp_pass(pass) == 1) { USART0_str("Correct pass!\r\n"); LCD_strout(1, 0, "ACCESS"); locked = 0; Init_buff(); break; } // 인증을 맞을 경우, 잠금 해제 + 쌓인 인터럽트 제거
		else { USART0_str("Wrong pass! retry\r\n"); LCD_strout(1, 0, "RETRY"); }
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	3c d1       	rcall	.+632    	; 0x101e <USART0_str>
     da6:	4d eb       	ldi	r20, 0xBD	; 189
     da8:	53 e0       	ldi	r21, 0x03	; 3
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	f5 dd       	rcall	.-1046   	; 0x99e <LCD_strout>
     db4:	de cf       	rjmp	.-68     	; 0xd72 <login+0x8>

00000db6 <system_toggle>:
     db6:	83 ec       	ldi	r24, 0xC3	; 195
			
	}
     db8:	93 e0       	ldi	r25, 0x03	; 3
	}
}

void system_toggle()
{
	USART0_str("\b\r\n\r\n Who do you want to toggle?\r\n");
     dba:	31 d1       	rcall	.+610    	; 0x101e <USART0_str>
	USART0_str("\bEnter name : \r\n");
     dbc:	86 ee       	ldi	r24, 0xE6	; 230
     dbe:	93 e0       	ldi	r25, 0x03	; 3
	receive_text();
     dc0:	2e d1       	rcall	.+604    	; 0x101e <USART0_str>
     dc2:	3e d1       	rcall	.+636    	; 0x1040 <receive_text>
	Toggle(temp_name, root);	//root에서 temp_name(UART 전역 배열)의 state를 반전시킨다.
     dc4:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <root>
     dc8:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <root+0x1>
     dcc:	87 e7       	ldi	r24, 0x77	; 119
     dce:	95 e0       	ldi	r25, 0x05	; 5
	reset_text();				//receive_text()로 받아온 temp_name배열을 '\0'으로 초기화시킴
     dd0:	8d dc       	rcall	.-1766   	; 0x6ec <Toggle>
     dd2:	54 d1       	rcall	.+680    	; 0x107c <reset_text>
	USART0_str("\r\n secceed!\r\n");
     dd4:	87 ef       	ldi	r24, 0xF7	; 247
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	22 c1       	rjmp	.+580    	; 0x101e <USART0_str>
     dda:	08 95       	ret

00000ddc <select>:
     ddc:	cf 93       	push	r28
	choiced = select(2);
	return choiced;
}

char select(int max_sel)	// max_sel만큼의 선택지중 하나를 반환
{
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
	char input;
	
	while (1)
	{
		while (Rflag == 0);
     de2:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <Rflag>
     de6:	88 23       	and	r24, r24
     de8:	e1 f3       	breq	.-8      	; 0xde2 <select+0x6>
		input = data;
     dea:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <data>
		
		if (input < '1' || input > '0'+max_sel)
     dee:	81 33       	cpi	r24, 0x31	; 49
     df0:	40 f0       	brcs	.+16     	; 0xe02 <select+0x26>
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ae 01       	movw	r20, r28
     df8:	40 5d       	subi	r20, 0xD0	; 208
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	42 17       	cp	r20, r18
     dfe:	53 07       	cpc	r21, r19
     e00:	34 f4       	brge	.+12     	; 0xe0e <select+0x32>
		{
			USART0_str("Wrong choice!\r\n");
     e02:	85 e0       	ldi	r24, 0x05	; 5
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	0b d1       	rcall	.+534    	; 0x101e <USART0_str>
			Rflag = 0;
     e08:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
{
	char input;
	
	while (1)
	{
		while (Rflag == 0);
     e0c:	ea cf       	rjmp	.-44     	; 0xde2 <select+0x6>
			
			continue;
		}
		else
		{
			Rflag = 0;
     e0e:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
			return input;
		}
	}

}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <remote_color>:

// 메뉴에서 2번 누를 경우 실행되는 함수
void remote_color()
{
	while (1) {
		Init_color();
     e18:	c5 d9       	rcall	.-3190   	; 0x1a4 <Init_color>
		USART0_str("\r\nSelect color 1.Green 2.Yellow 3.RED\r\n");
     e1a:	85 e1       	ldi	r24, 0x15	; 21
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	ff d0       	rcall	.+510    	; 0x101e <USART0_str>
		char command = select(3);
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	90 e0       	ldi	r25, 0x00	; 0
		change_color(command);
     e24:	db df       	rcall	.-74     	; 0xddc <select>
     e26:	c9 c9       	rjmp	.-3182   	; 0x1ba <change_color>
     e28:	08 95       	ret

00000e2a <Manage_Member>:
	}
	sei();
}

void Manage_Member()
{
     e2a:	cf 93       	push	r28
	char choiced = '0';
	USART0_str("\b\r\n\r\nWhat do you want? 1. Add member, 2. Delete member\r\n");
     e2c:	8d e3       	ldi	r24, 0x3D	; 61
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	f6 d0       	rcall	.+492    	; 0x101e <USART0_str>
	choiced = select(2);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	d2 df       	rcall	.-92     	; 0xddc <select>
     e38:	c8 2f       	mov	r28, r24
	USART0_str("\b\r\nEnter name : \r\n");
     e3a:	86 e7       	ldi	r24, 0x76	; 118
     e3c:	94 e0       	ldi	r25, 0x04	; 4
	receive_text();	//UART.c에 만들어둔 전역변수 temp_name[20]에 텍스트 받기
     e3e:	ef d0       	rcall	.+478    	; 0x101e <USART0_str>
     e40:	ff d0       	rcall	.+510    	; 0x1040 <receive_text>
	if (choiced == '1')
     e42:	c1 33       	cpi	r28, 0x31	; 49
	{
		USART0_str("\b\r\nWhere is it? 1. in , 2. out \r\n");
     e44:	f9 f4       	brne	.+62     	; 0xe84 <Manage_Member+0x5a>
     e46:	89 e8       	ldi	r24, 0x89	; 137
     e48:	94 e0       	ldi	r25, 0x04	; 4
		choiced = select(2);
     e4a:	e9 d0       	rcall	.+466    	; 0x101e <USART0_str>
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	c5 df       	rcall	.-118    	; 0xddc <select>
		if (choiced == '1') Enroll(temp_name, 1, root);			//In_out에 선언해둔 전역 객체 root를 통해 멤버 등록
     e52:	81 33       	cpi	r24, 0x31	; 49
     e54:	51 f4       	brne	.+20     	; 0xe6a <Manage_Member+0x40>
     e56:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <root>
     e5a:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <root+0x1>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	87 e7       	ldi	r24, 0x77	; 119
     e64:	95 e0       	ldi	r25, 0x05	; 5
     e66:	df db       	rcall	.-2114   	; 0x626 <Enroll>
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <Manage_Member+0x56>
		else if (choiced == '2') Enroll(temp_name, 0, root);
     e6a:	82 33       	cpi	r24, 0x32	; 50
     e6c:	49 f4       	brne	.+18     	; 0xe80 <Manage_Member+0x56>
     e6e:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <root>
     e72:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <root+0x1>
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	87 e7       	ldi	r24, 0x77	; 119
     e7c:	95 e0       	ldi	r25, 0x05	; 5

		reset_text();
     e7e:	d3 db       	rcall	.-2138   	; 0x626 <Enroll>
     e80:	fd d0       	rcall	.+506    	; 0x107c <reset_text>
	}
	else if (choiced == '2')
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <Manage_Member+0x6c>
     e84:	c2 33       	cpi	r28, 0x32	; 50
	{
		Delete(temp_name, root);
     e86:	39 f4       	brne	.+14     	; 0xe96 <Manage_Member+0x6c>
     e88:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <root>
     e8c:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <root+0x1>
     e90:	87 e7       	ldi	r24, 0x77	; 119
     e92:	95 e0       	ldi	r25, 0x05	; 5
     e94:	f6 db       	rcall	.-2068   	; 0x682 <Delete>
	}
}
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <__vector_26>:
int second = 0;
int timer = 0;
int wait_cnt = 0;

ISR(TIMER3_COMPA_vect)			//3번 타이머 CTC모드 인터럽트 발생시 실행
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	0b b6       	in	r0, 0x3b	; 59
     ea6:	0f 92       	push	r0
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	if(locked == 1) return;
     ec0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <locked>
     ec4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <locked+0x1>
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	09 f4       	brne	.+2      	; 0xece <__vector_26+0x34>
     ecc:	42 c0       	rjmp	.+132    	; 0xf52 <__vector_26+0xb8>
	timer_cnt++;
     ece:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <timer_cnt>
     ed2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <timer_cnt+0x1>
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <timer_cnt+0x1>
     edc:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <timer_cnt>
	
	if (timer_cnt == 2)
     ee0:	02 97       	sbiw	r24, 0x02	; 2
     ee2:	b1 f4       	brne	.+44     	; 0xf10 <__vector_26+0x76>
	{
		timer_cnt = 0;
     ee4:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <timer_cnt+0x1>
     ee8:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <timer_cnt>
		second++;
     eec:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <second>
     ef0:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <second+0x1>
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <second+0x1>
     efa:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <second>
		wait_cnt++;
     efe:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <wait_cnt>
     f02:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <wait_cnt+0x1>
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <wait_cnt+0x1>
     f0c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <wait_cnt>
	}
	if(second == 35)
     f10:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <second>
     f14:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <second+0x1>
     f18:	83 97       	sbiw	r24, 0x23	; 35
     f1a:	71 f4       	brne	.+28     	; 0xf38 <__vector_26+0x9e>
	{
		LCD_strout(1,0, "                   ");
     f1c:	48 ed       	ldi	r20, 0xD8	; 216
     f1e:	54 e0       	ldi	r21, 0x04	; 4
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	3a dd       	rcall	.-1420   	; 0x99e <LCD_strout>
		LCD_strout(1,0,"Check Please");
     f2a:	4c ee       	ldi	r20, 0xEC	; 236
     f2c:	54 e0       	ldi	r21, 0x04	; 4
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	33 dd       	rcall	.-1434   	; 0x99e <LCD_strout>
	}
	if(second == 60)
     f38:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <second>
     f3c:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <second+0x1>
     f40:	cc 97       	sbiw	r24, 0x3c	; 60
     f42:	39 f4       	brne	.+14     	; 0xf52 <__vector_26+0xb8>
	{
		USART0_str("\r\nrepeater no response\r\n");
     f44:	89 ef       	ldi	r24, 0xF9	; 249
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	6a d0       	rcall	.+212    	; 0x101e <USART0_str>
		second = 0;
     f4a:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <second+0x1>
     f4e:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <second>
	}

	
	
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0b be       	out	0x3b, r0	; 59
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <Init_time>:

void Init_time()		//타이머의 값들을 처음으로 되돌리는 함수
{
	TCNT3H = 0x00;
     f78:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	TCNT3L = 0x00;
     f7c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	timer_cnt = 0;
     f80:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <timer_cnt+0x1>
     f84:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <timer_cnt>
	second = 0;
     f88:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <second+0x1>
     f8c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <second>
     f90:	08 95       	ret

00000f92 <Init_timer>:
}

void Init_timer()		// 타이머 초기 세팅 함수
{
	ASSR = 0;
     f92:	10 be       	out	0x30, r1	; 48
	ETIMSK |= 0x10;
     f94:	ed e7       	ldi	r30, 0x7D	; 125
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	80 83       	st	Z, r24
	TCCR3A = 0;
     f9e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x0d;
     fa2:	8d e0       	ldi	r24, 0x0D	; 13
     fa4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR3AH = 0x1c;
     fa8:	8c e1       	ldi	r24, 0x1C	; 28
     faa:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	OCR3AL = 0x20;
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TIFR = 0;
     fb4:	16 be       	out	0x36, r1	; 54
	ETIFR = 0;
     fb6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	sei();
     fba:	78 94       	sei
     fbc:	08 95       	ret

00000fbe <Init_USART>:
		if ((UCSR0A & 0x80) != 0)break;
	}
	data = UDR0;
	UCSR0A |= 0x80;
	return data;
}
     fbe:	12 b8       	out	0x02, r1	; 2
     fc0:	1b b8       	out	0x0b, r1	; 11
     fc2:	88 e9       	ldi	r24, 0x98	; 152
     fc4:	8a b9       	out	0x0a, r24	; 10
     fc6:	86 e0       	ldi	r24, 0x06	; 6
     fc8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     fcc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	89 b9       	out	0x09, r24	; 9
     fd4:	08 95       	ret

00000fd6 <Serial_Send>:
     fd6:	5d 9b       	sbis	0x0b, 5	; 11
     fd8:	fe cf       	rjmp	.-4      	; 0xfd6 <Serial_Send>
     fda:	8c b9       	out	0x0c, r24	; 12
     fdc:	8b b1       	in	r24, 0x0b	; 11
     fde:	80 62       	ori	r24, 0x20	; 32
     fe0:	8b b9       	out	0x0b, r24	; 11
     fe2:	08 95       	ret

00000fe4 <__vector_18>:
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	8c b1       	in	r24, 0x0c	; 12
     ff4:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <data>
     ff8:	8b b1       	in	r24, 0x0b	; 11
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8b b9       	out	0x0b, r24	; 11
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <Rflag>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	97 e4       	ldi	r25, 0x47	; 71
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    100e:	00 00       	nop
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <USART0_str>:
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
    1024:	02 c0       	rjmp	.+4      	; 0x102a <USART0_str+0xc>
    1026:	21 96       	adiw	r28, 0x01	; 1
    1028:	d6 df       	rcall	.-84     	; 0xfd6 <Serial_Send>
    102a:	88 81       	ld	r24, Y
    102c:	81 11       	cpse	r24, r1
    102e:	fb cf       	rjmp	.-10     	; 0x1026 <USART0_str+0x8>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <Init_buff>:

}

void Init_buff()
{
	while (UCSR0A & (1 << RXC0)) {
    1036:	01 c0       	rjmp	.+2      	; 0x103a <Init_buff+0x4>
    (void)UDR0;  // 수신 데이터 무시하고 읽기
    1038:	8c b1       	in	r24, 0x0c	; 12

}

void Init_buff()
{
	while (UCSR0A & (1 << RXC0)) {
    103a:	5f 99       	sbic	0x0b, 7	; 11
    103c:	fd cf       	rjmp	.-6      	; 0x1038 <Init_buff+0x2>
    (void)UDR0;  // 수신 데이터 무시하고 읽기
	}
	return;
}
    103e:	08 95       	ret

00001040 <receive_text>:

void receive_text()
{
	int i = 0;
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
	while (1) {
		
		if(i>=19){USART0_str("it's too long!!!\r\n"); return;}
    1044:	83 31       	cpi	r24, 0x13	; 19
    1046:	91 05       	cpc	r25, r1
    1048:	24 f0       	brlt	.+8      	; 0x1052 <receive_text+0x12>
    104a:	82 e1       	ldi	r24, 0x12	; 18
    104c:	95 e0       	ldi	r25, 0x05	; 5
    104e:	e7 cf       	rjmp	.-50     	; 0x101e <USART0_str>
    1050:	08 95       	ret
		
		if (Rflag == 0) continue;
    1052:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <Rflag>
    1056:	22 23       	and	r18, r18
    1058:	a9 f3       	breq	.-22     	; 0x1044 <receive_text+0x4>
		char command = data;
    105a:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <data>
		Rflag = 0;
    105e:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
		if (command == '\r') {temp_name[i] = '\0'; break;}
    1062:	2d 30       	cpi	r18, 0x0D	; 13
    1064:	29 f4       	brne	.+10     	; 0x1070 <receive_text+0x30>
    1066:	fc 01       	movw	r30, r24
    1068:	e9 58       	subi	r30, 0x89	; 137
    106a:	fa 4f       	sbci	r31, 0xFA	; 250
    106c:	10 82       	st	Z, r1
    106e:	08 95       	ret
		
		temp_name[i]=command;
    1070:	fc 01       	movw	r30, r24
    1072:	e9 58       	subi	r30, 0x89	; 137
    1074:	fa 4f       	sbci	r31, 0xFA	; 250
    1076:	20 83       	st	Z, r18
		i++;
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	e4 cf       	rjmp	.-56     	; 0x1044 <receive_text+0x4>

0000107c <reset_text>:
	}
}

void reset_text()
{
	for(int i = 0; i < 20; i++)
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	05 c0       	rjmp	.+10     	; 0x108c <reset_text+0x10>
	{
		temp_name[i] = '\0';
    1082:	fc 01       	movw	r30, r24
    1084:	e9 58       	subi	r30, 0x89	; 137
    1086:	fa 4f       	sbci	r31, 0xFA	; 250
    1088:	10 82       	st	Z, r1
	}
}

void reset_text()
{
	for(int i = 0; i < 20; i++)
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	84 31       	cpi	r24, 0x14	; 20
    108e:	91 05       	cpc	r25, r1
    1090:	c4 f3       	brlt	.-16     	; 0x1082 <reset_text+0x6>
	{
		temp_name[i] = '\0';
	}
}
    1092:	08 95       	ret

00001094 <clear_terminal>:

void clear_terminal() {
	Serial_Send(0x1B);    // ESC 문자 전송
    1094:	8b e1       	ldi	r24, 0x1B	; 27
    1096:	9f df       	rcall	.-194    	; 0xfd6 <Serial_Send>
	USART0_str("[2J");    // 화면 클리어
    1098:	85 e2       	ldi	r24, 0x25	; 37
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	c0 df       	rcall	.-128    	; 0x101e <USART0_str>
	Serial_Send(0x1B);    // ESC 문자 전송
    109e:	8b e1       	ldi	r24, 0x1B	; 27
    10a0:	9a df       	rcall	.-204    	; 0xfd6 <Serial_Send>
	USART0_str("[H");     // 커서를 0,0으로
    10a2:	89 e2       	ldi	r24, 0x29	; 41
    10a4:	95 e0       	ldi	r25, 0x05	; 5
    10a6:	bb df       	rcall	.-138    	; 0x101e <USART0_str>
	USART0_str("\r\n");
    10a8:	82 e7       	ldi	r24, 0x72	; 114
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	b8 cf       	rjmp	.-144    	; 0x101e <USART0_str>
    10ae:	08 95       	ret

000010b0 <check_pass>:
    10b0:	cf 93       	push	r28
	UCSR0A |= 0x80;
	return data;
}

void check_pass()		//비밀번호 세팅용 함수.
{
    10b2:	df 93       	push	r29
	clear_terminal();
    10b4:	ef df       	rcall	.-34     	; 0x1094 <clear_terminal>
	USART0_str("\r\n\r\nEnter your pass\r\n");
    10b6:	8c e2       	ldi	r24, 0x2C	; 44
    10b8:	95 e0       	ldi	r25, 0x05	; 5
    10ba:	b1 df       	rcall	.-158    	; 0x101e <USART0_str>
	for (int i = 0; i < 4; i++)
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	d0 e0       	ldi	r29, 0x00	; 0
    10c0:	18 c0       	rjmp	.+48     	; 0x10f2 <check_pass+0x42>
	{
		while (1) {
			if (Rflag == 0) continue;
    10c2:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <Rflag>
    10c6:	88 23       	and	r24, r24
    10c8:	e1 f3       	breq	.-8      	; 0x10c2 <check_pass+0x12>
			if (data >= '0' && data <= '9') { pass[i] = data; Rflag = 0; break; }
    10ca:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <data>
    10ce:	90 ed       	ldi	r25, 0xD0	; 208
    10d0:	98 0f       	add	r25, r24
    10d2:	9a 30       	cpi	r25, 0x0A	; 10
    10d4:	40 f4       	brcc	.+16     	; 0x10e6 <check_pass+0x36>
    10d6:	fe 01       	movw	r30, r28
    10d8:	e0 59       	subi	r30, 0x90	; 144
    10da:	fa 4f       	sbci	r31, 0xFA	; 250
    10dc:	80 83       	st	Z, r24
    10de:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>

void check_pass()		//비밀번호 세팅용 함수.
{
	clear_terminal();
	USART0_str("\r\n\r\nEnter your pass\r\n");
	for (int i = 0; i < 4; i++)
    10e2:	21 96       	adiw	r28, 0x01	; 1
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <check_pass+0x42>
	{
		while (1) {
			if (Rflag == 0) continue;
			if (data >= '0' && data <= '9') { pass[i] = data; Rflag = 0; break; }
			else { Rflag = 0; USART0_str("\t input only number \r\n"); }
    10e6:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <Rflag>
    10ea:	82 e4       	ldi	r24, 0x42	; 66
    10ec:	95 e0       	ldi	r25, 0x05	; 5
    10ee:	97 df       	rcall	.-210    	; 0x101e <USART0_str>
    10f0:	e8 cf       	rjmp	.-48     	; 0x10c2 <check_pass+0x12>

void check_pass()		//비밀번호 세팅용 함수.
{
	clear_terminal();
	USART0_str("\r\n\r\nEnter your pass\r\n");
	for (int i = 0; i < 4; i++)
    10f2:	c4 30       	cpi	r28, 0x04	; 4
    10f4:	d1 05       	cpc	r29, r1
    10f6:	2c f3       	brlt	.-54     	; 0x10c2 <check_pass+0x12>
			if (data >= '0' && data <= '9') { pass[i] = data; Rflag = 0; break; }
			else { Rflag = 0; USART0_str("\t input only number \r\n"); }

		}
	}
	pass[4] = '\0';
    10f8:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <pass+0x4>
	USART0_str("\r\nset\t");
    10fc:	89 e5       	ldi	r24, 0x59	; 89
    10fe:	95 e0       	ldi	r25, 0x05	; 5
	USART0_str(pass);
    1100:	8e df       	rcall	.-228    	; 0x101e <USART0_str>
    1102:	80 e7       	ldi	r24, 0x70	; 112
    1104:	95 e0       	ldi	r25, 0x05	; 5
	USART0_str("\r\n");
    1106:	8b df       	rcall	.-234    	; 0x101e <USART0_str>
    1108:	82 e7       	ldi	r24, 0x72	; 114
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	88 df       	rcall	.-240    	; 0x101e <USART0_str>

}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <__tablejump2__>:
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	00 24       	eor	r0, r0
    111a:	00 1c       	adc	r0, r0
    111c:	0b be       	out	0x3b, r0	; 59
    111e:	07 90       	elpm	r0, Z+
    1120:	f6 91       	elpm	r31, Z
    1122:	e0 2d       	mov	r30, r0
    1124:	09 94       	ijmp

00001126 <malloc>:
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	10 f4       	brcc	.+4      	; 0x1138 <malloc+0x12>
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <__flp>
    113c:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <__flp+0x1>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	19 f1       	breq	.+70     	; 0x1192 <malloc+0x6c>
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	02 81       	ldd	r16, Z+2	; 0x02
    1152:	13 81       	ldd	r17, Z+3	; 0x03
    1154:	48 17       	cp	r20, r24
    1156:	59 07       	cpc	r21, r25
    1158:	c8 f0       	brcs	.+50     	; 0x118c <malloc+0x66>
    115a:	84 17       	cp	r24, r20
    115c:	95 07       	cpc	r25, r21
    115e:	69 f4       	brne	.+26     	; 0x117a <malloc+0x54>
    1160:	10 97       	sbiw	r26, 0x00	; 0
    1162:	31 f0       	breq	.+12     	; 0x1170 <malloc+0x4a>
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	0c 93       	st	X, r16
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	13 96       	adiw	r26, 0x03	; 3
    116c:	1c 93       	st	X, r17
    116e:	27 c0       	rjmp	.+78     	; 0x11be <malloc+0x98>
    1170:	00 93 8d 05 	sts	0x058D, r16	; 0x80058d <__flp>
    1174:	10 93 8e 05 	sts	0x058E, r17	; 0x80058e <__flp+0x1>
    1178:	22 c0       	rjmp	.+68     	; 0x11be <malloc+0x98>
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	19 f0       	breq	.+6      	; 0x1186 <malloc+0x60>
    1180:	42 17       	cp	r20, r18
    1182:	53 07       	cpc	r21, r19
    1184:	18 f4       	brcc	.+6      	; 0x118c <malloc+0x66>
    1186:	9a 01       	movw	r18, r20
    1188:	bd 01       	movw	r22, r26
    118a:	ef 01       	movw	r28, r30
    118c:	df 01       	movw	r26, r30
    118e:	f8 01       	movw	r30, r16
    1190:	db cf       	rjmp	.-74     	; 0x1148 <malloc+0x22>
    1192:	21 15       	cp	r18, r1
    1194:	31 05       	cpc	r19, r1
    1196:	f9 f0       	breq	.+62     	; 0x11d6 <malloc+0xb0>
    1198:	28 1b       	sub	r18, r24
    119a:	39 0b       	sbc	r19, r25
    119c:	24 30       	cpi	r18, 0x04	; 4
    119e:	31 05       	cpc	r19, r1
    11a0:	80 f4       	brcc	.+32     	; 0x11c2 <malloc+0x9c>
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	61 15       	cp	r22, r1
    11a8:	71 05       	cpc	r23, r1
    11aa:	21 f0       	breq	.+8      	; 0x11b4 <malloc+0x8e>
    11ac:	fb 01       	movw	r30, r22
    11ae:	93 83       	std	Z+3, r25	; 0x03
    11b0:	82 83       	std	Z+2, r24	; 0x02
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <malloc+0x96>
    11b4:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <__flp+0x1>
    11b8:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <__flp>
    11bc:	fe 01       	movw	r30, r28
    11be:	32 96       	adiw	r30, 0x02	; 2
    11c0:	44 c0       	rjmp	.+136    	; 0x124a <malloc+0x124>
    11c2:	fe 01       	movw	r30, r28
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	81 93       	st	Z+, r24
    11ca:	91 93       	st	Z+, r25
    11cc:	22 50       	subi	r18, 0x02	; 2
    11ce:	31 09       	sbc	r19, r1
    11d0:	39 83       	std	Y+1, r19	; 0x01
    11d2:	28 83       	st	Y, r18
    11d4:	3a c0       	rjmp	.+116    	; 0x124a <malloc+0x124>
    11d6:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <__brkval>
    11da:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <__brkval+0x1>
    11de:	23 2b       	or	r18, r19
    11e0:	41 f4       	brne	.+16     	; 0x11f2 <malloc+0xcc>
    11e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    11e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    11ea:	30 93 8c 05 	sts	0x058C, r19	; 0x80058c <__brkval+0x1>
    11ee:	20 93 8b 05 	sts	0x058B, r18	; 0x80058b <__brkval>
    11f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11fa:	21 15       	cp	r18, r1
    11fc:	31 05       	cpc	r19, r1
    11fe:	41 f4       	brne	.+16     	; 0x1210 <malloc+0xea>
    1200:	2d b7       	in	r18, 0x3d	; 61
    1202:	3e b7       	in	r19, 0x3e	; 62
    1204:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1208:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    120c:	24 1b       	sub	r18, r20
    120e:	35 0b       	sbc	r19, r21
    1210:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <__brkval>
    1214:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <__brkval+0x1>
    1218:	e2 17       	cp	r30, r18
    121a:	f3 07       	cpc	r31, r19
    121c:	a0 f4       	brcc	.+40     	; 0x1246 <malloc+0x120>
    121e:	2e 1b       	sub	r18, r30
    1220:	3f 0b       	sbc	r19, r31
    1222:	28 17       	cp	r18, r24
    1224:	39 07       	cpc	r19, r25
    1226:	78 f0       	brcs	.+30     	; 0x1246 <malloc+0x120>
    1228:	ac 01       	movw	r20, r24
    122a:	4e 5f       	subi	r20, 0xFE	; 254
    122c:	5f 4f       	sbci	r21, 0xFF	; 255
    122e:	24 17       	cp	r18, r20
    1230:	35 07       	cpc	r19, r21
    1232:	48 f0       	brcs	.+18     	; 0x1246 <malloc+0x120>
    1234:	4e 0f       	add	r20, r30
    1236:	5f 1f       	adc	r21, r31
    1238:	50 93 8c 05 	sts	0x058C, r21	; 0x80058c <__brkval+0x1>
    123c:	40 93 8b 05 	sts	0x058B, r20	; 0x80058b <__brkval>
    1240:	81 93       	st	Z+, r24
    1242:	91 93       	st	Z+, r25
    1244:	02 c0       	rjmp	.+4      	; 0x124a <malloc+0x124>
    1246:	e0 e0       	ldi	r30, 0x00	; 0
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	cf 01       	movw	r24, r30
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <free>:
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	09 f4       	brne	.+2      	; 0x1260 <free+0xa>
    125e:	81 c0       	rjmp	.+258    	; 0x1362 <free+0x10c>
    1260:	fc 01       	movw	r30, r24
    1262:	32 97       	sbiw	r30, 0x02	; 2
    1264:	13 82       	std	Z+3, r1	; 0x03
    1266:	12 82       	std	Z+2, r1	; 0x02
    1268:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <__flp>
    126c:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <__flp+0x1>
    1270:	10 97       	sbiw	r26, 0x00	; 0
    1272:	81 f4       	brne	.+32     	; 0x1294 <free+0x3e>
    1274:	20 81       	ld	r18, Z
    1276:	31 81       	ldd	r19, Z+1	; 0x01
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <__brkval>
    1280:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <__brkval+0x1>
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	51 f5       	brne	.+84     	; 0x12de <free+0x88>
    128a:	f0 93 8c 05 	sts	0x058C, r31	; 0x80058c <__brkval+0x1>
    128e:	e0 93 8b 05 	sts	0x058B, r30	; 0x80058b <__brkval>
    1292:	67 c0       	rjmp	.+206    	; 0x1362 <free+0x10c>
    1294:	ed 01       	movw	r28, r26
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	ce 17       	cp	r28, r30
    129c:	df 07       	cpc	r29, r31
    129e:	40 f4       	brcc	.+16     	; 0x12b0 <free+0x5a>
    12a0:	4a 81       	ldd	r20, Y+2	; 0x02
    12a2:	5b 81       	ldd	r21, Y+3	; 0x03
    12a4:	9e 01       	movw	r18, r28
    12a6:	41 15       	cp	r20, r1
    12a8:	51 05       	cpc	r21, r1
    12aa:	f1 f0       	breq	.+60     	; 0x12e8 <free+0x92>
    12ac:	ea 01       	movw	r28, r20
    12ae:	f5 cf       	rjmp	.-22     	; 0x129a <free+0x44>
    12b0:	d3 83       	std	Z+3, r29	; 0x03
    12b2:	c2 83       	std	Z+2, r28	; 0x02
    12b4:	40 81       	ld	r20, Z
    12b6:	51 81       	ldd	r21, Z+1	; 0x01
    12b8:	84 0f       	add	r24, r20
    12ba:	95 1f       	adc	r25, r21
    12bc:	c8 17       	cp	r28, r24
    12be:	d9 07       	cpc	r29, r25
    12c0:	59 f4       	brne	.+22     	; 0x12d8 <free+0x82>
    12c2:	88 81       	ld	r24, Y
    12c4:	99 81       	ldd	r25, Y+1	; 0x01
    12c6:	84 0f       	add	r24, r20
    12c8:	95 1f       	adc	r25, r21
    12ca:	02 96       	adiw	r24, 0x02	; 2
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	9b 81       	ldd	r25, Y+3	; 0x03
    12d4:	93 83       	std	Z+3, r25	; 0x03
    12d6:	82 83       	std	Z+2, r24	; 0x02
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <free+0x92>
    12de:	f0 93 8e 05 	sts	0x058E, r31	; 0x80058e <__flp+0x1>
    12e2:	e0 93 8d 05 	sts	0x058D, r30	; 0x80058d <__flp>
    12e6:	3d c0       	rjmp	.+122    	; 0x1362 <free+0x10c>
    12e8:	e9 01       	movw	r28, r18
    12ea:	fb 83       	std	Y+3, r31	; 0x03
    12ec:	ea 83       	std	Y+2, r30	; 0x02
    12ee:	49 91       	ld	r20, Y+
    12f0:	59 91       	ld	r21, Y+
    12f2:	c4 0f       	add	r28, r20
    12f4:	d5 1f       	adc	r29, r21
    12f6:	ec 17       	cp	r30, r28
    12f8:	fd 07       	cpc	r31, r29
    12fa:	61 f4       	brne	.+24     	; 0x1314 <free+0xbe>
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	84 0f       	add	r24, r20
    1302:	95 1f       	adc	r25, r21
    1304:	02 96       	adiw	r24, 0x02	; 2
    1306:	e9 01       	movw	r28, r18
    1308:	99 83       	std	Y+1, r25	; 0x01
    130a:	88 83       	st	Y, r24
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	9b 83       	std	Y+3, r25	; 0x03
    1312:	8a 83       	std	Y+2, r24	; 0x02
    1314:	e0 e0       	ldi	r30, 0x00	; 0
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	13 97       	sbiw	r26, 0x03	; 3
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	19 f0       	breq	.+6      	; 0x132a <free+0xd4>
    1324:	fd 01       	movw	r30, r26
    1326:	dc 01       	movw	r26, r24
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <free+0xc2>
    132a:	8d 91       	ld	r24, X+
    132c:	9c 91       	ld	r25, X
    132e:	11 97       	sbiw	r26, 0x01	; 1
    1330:	9d 01       	movw	r18, r26
    1332:	2e 5f       	subi	r18, 0xFE	; 254
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <__brkval>
    133e:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <__brkval+0x1>
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	69 f4       	brne	.+26     	; 0x1362 <free+0x10c>
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	29 f4       	brne	.+10     	; 0x1356 <free+0x100>
    134c:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <__flp+0x1>
    1350:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <__flp>
    1354:	02 c0       	rjmp	.+4      	; 0x135a <free+0x104>
    1356:	13 82       	std	Z+3, r1	; 0x03
    1358:	12 82       	std	Z+2, r1	; 0x02
    135a:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <__brkval+0x1>
    135e:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <__brkval>
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <strcmp>:
    1368:	fb 01       	movw	r30, r22
    136a:	dc 01       	movw	r26, r24
    136c:	8d 91       	ld	r24, X+
    136e:	01 90       	ld	r0, Z+
    1370:	80 19       	sub	r24, r0
    1372:	01 10       	cpse	r0, r1
    1374:	d9 f3       	breq	.-10     	; 0x136c <strcmp+0x4>
    1376:	99 0b       	sbc	r25, r25
    1378:	08 95       	ret

0000137a <strcpy>:
    137a:	fb 01       	movw	r30, r22
    137c:	dc 01       	movw	r26, r24
    137e:	01 90       	ld	r0, Z+
    1380:	0d 92       	st	X+, r0
    1382:	00 20       	and	r0, r0
    1384:	e1 f7       	brne	.-8      	; 0x137e <strcpy+0x4>
    1386:	08 95       	ret

00001388 <_exit>:
    1388:	f8 94       	cli

0000138a <__stop_program>:
    138a:	ff cf       	rjmp	.-2      	; 0x138a <__stop_program>
