# 프로젝트명 : 경계 업무를 위한 단말기 구현

## 개요 : MCU 실습 기기를 초소에서 사용하는 상태 전송용 단말기로 활용하여 시리얼 터미널과 UART 통신을 통한 소통 및 기타 기능을 구현한다.

## 주요기능
 1. 처음 프로그램을 빌드 시에 터미널에서 password를 설정한다. 초소 단말에서 키패드를 이용해 동일한 password를 입력시 이하의 기능들이 해금된다.
	1-1 : 메뉴에서 7번 기능 선택 시 비밀번호를 재설정 할 수 있다.
 2. 메뉴에서 1번 선택시 텍스트를 초소 단말의 Text LCD로 전송한다. Text LCD의 2번 라인은 상태메시지등을 출력하고 텍스트는 1번 라인에서만 구현하도록 한다.
 3. 메뉴에서 2번 선택시 초소 단말의 color LED의 색상을 선택할 수 있다. 
 4. 메뉴에서 3번 선택시 하이퍼 터미널의 화면을 클리어한다.
 5. 초소 단말에서 push button을 누르면 인터럽트를 통한 기능을 사용할 수 있다. 
	1번 : Text LCD의 화면을 클리어 / 2, 3, 4번 : 터미널로 safe, danger, strange 등의 상황 메시지를 전송한다.
 6. Timer3, CTC모드를 사용해 초소 단말에서 인터럽트로 터미널에 15초 이상 보고를 하지 않을 경우 LCD단말에 확인 메시지가 출력, 20초 이상 미송신시 터미널에 "repeater no response"를 출력한다.
 7. 초소 단말의 광 감지 센서를 사용해 초소의 밝기 상태를 감지한다. 밝기가 일정이상 내려가거나 일정이상 올라갈 경우에 그 사실을 터미널에 송신한다.
 8. 터미널 메뉴에서 4번 기능으로 멤버를 추가 / 삭제할 수 있다.
	8-1 : 메뉴에서 5번 기능으로 지금껏 등록한 멤버를 조회할 수 있다.
	8-2 : 메뉴에서 6번 기능으로 등록한 멤버의 state 변수를 토글할 수 있다.
	8-3 : 초소 단말에서 6, 7번 버튼으로 터미널에서 등록한 멤버를 조회할 수 있다.
	8-4 : 초소 단말에서 8번 버튼으로 조회중인 멤버의 state를 변경할 수 있다. 
	8-5 : 초소 단말에서 5번 버튼으로 8-3, 8-4 기능을 비활성화 할 수 있다.

# 주요모듈
 1. Cds : 광센서 초기화 및 관련 인터럽트 코드
 2. color_led : 색 설정 테이블 및 Full Color LED 설정용 초기화/설정 코드
 3. In_out : 멤버 추가, 삭제, 토글, 조회 코드
 4. interrupt : push button 인터럽트 관련 초기화/설정 코드 및 잠금, 활성화 코드
 5. LCD : LCD관련 초기화, 문자(열)전송, 위치조정, 클리어 기능 코드
 6. modules : keypad관련 초기화, 키패드 인식, 비밀번호 비교 기능 코드
 7. system : main함수의 기능들을 단위별로 구분시켜놓은 것. * back 함수는 미구현
 8. timer : 타이머3 CTC 모드 세팅, 초기화 코드. * wait함수 미사용 상태
 9. UART : 터미널 사용을 위한 UART 통신 코드. 초기화, 문자(열) 보내기, 에코, 문자열 인식, 비밀번호 세팅 기능 코드.
 10. main : 실제로 기능을 실행하는 main함수 

## 사용법
 해당 프로젝트의 소스 코드를 Atmel Studio에서 실행한다.
 시리얼 터미널 프로그램에서 전송 속도를 115200bps, 흐름 제어는 없음으로 설정한다. 연결 포트를 COM5(환경에 따라 설정)로 하여 연결하며 에코 기능을 활성화

## 결과 
 1. UART 기반 비밀번호 인증 및 명령 제어 성공
 2. 실시간 LCD 및 color LED 제어 구현
 3. 인터럽트 기반 상태 보고 기능 작동
 4. 터미널 화면 제어(화면 클리어, 커서 이동) 구현
 5. 타이머 기능 구현을 통한 시간 기반의 인터럽트 이벤트 구현
 6. 멤버 관리를 터미널을 통해 구현하고 일부 기능은 초소 단말을 통해 사용가능.

## 느낀 점 및 개선사항
 1. 터미널 제어를 통한 UI의 제한적인 기능을 이용하며 유저 친화적 인터페이스의 중요성을 깨닫게 됨.
 2. UART, 인터럽트, 타이머, LCD를 이용한 기능을 구현하며 이들에 대한 이해도를 높임.
 3. 인터럽트의 우선순위나 기능 사용 중의 인터럽트 실행 등으로 인한 기능 충돌 제어의 중요성을 느낌.
 4. 프로젝트 진행 중에 사용하는 함수나 변수의 수가 많아짐에 따라 정리 및 재사용의 필요성이 느낌.
 5. 이상적인 시나리오(개발자의 의도)가 아닌 유저의 입장에서의 예외처리가 매우 중요함을 느낌.
 6. 돌발 상황에 대한 보안 및 안정성을 강화하고 유저 편의적 기능을 추가/보완할 예정임
