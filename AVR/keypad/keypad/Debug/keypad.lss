
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7d  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a48  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000673  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049b  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e8  00000000  00000000  00002a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e8 d0       	rcall	.+464    	; 0x294 <main>
  c4:	f0 c0       	rjmp	.+480    	; 0x2a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <PortInit>:
	while(*str!=0)
	{
		LCD_CHAR(*str);
		str++;
	}
}
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret

000000d2 <LCD_Data>:
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	91 60       	ori	r25, 0x01	; 1
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	98 b3       	in	r25, 0x18	; 24
  da:	9d 7f       	andi	r25, 0xFD	; 253
  dc:	98 bb       	out	0x18, r25	; 24
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	98 bb       	out	0x18, r25	; 24
  e4:	e7 ec       	ldi	r30, 0xC7	; 199
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Data+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Data+0x1c>
  ee:	00 00       	nop
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	87 ec       	ldi	r24, 0xC7	; 199
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Data+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_Data+0x2a>
  fc:	00 00       	nop
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret

00000106 <LCD_Comm>:
 106:	98 b3       	in	r25, 0x18	; 24
 108:	9e 7f       	andi	r25, 0xFE	; 254
 10a:	98 bb       	out	0x18, r25	; 24
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	9d 7f       	andi	r25, 0xFD	; 253
 110:	98 bb       	out	0x18, r25	; 24
 112:	98 b3       	in	r25, 0x18	; 24
 114:	94 60       	ori	r25, 0x04	; 4
 116:	98 bb       	out	0x18, r25	; 24
 118:	e7 ec       	ldi	r30, 0xC7	; 199
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Comm+0x16>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_Comm+0x1c>
 122:	00 00       	nop
 124:	85 bb       	out	0x15, r24	; 21
 126:	87 ec       	ldi	r24, 0xC7	; 199
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Comm+0x24>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Comm+0x2a>
 130:	00 00       	nop
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 95       	ret

0000013a <LCD_CHAR>:
 13a:	cb df       	rcall	.-106    	; 0xd2 <LCD_Data>
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_CHAR+0x6>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_CHAR+0xc>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <LCD_pos>:

void LCD_pos(unsigned char col, unsigned char row)
{
	
	LCD_Comm(0x80 | (row+col*0x40));
 14a:	90 e4       	ldi	r25, 0x40	; 64
 14c:	89 9f       	mul	r24, r25
 14e:	60 0d       	add	r22, r0
 150:	11 24       	eor	r1, r1
 152:	86 2f       	mov	r24, r22
 154:	80 68       	ori	r24, 0x80	; 128
 156:	d7 cf       	rjmp	.-82     	; 0x106 <LCD_Comm>
 158:	08 95       	ret

0000015a <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_Comm(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	d4 df       	rcall	.-88     	; 0x106 <LCD_Comm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e7       	ldi	r24, 0x7F	; 127
 160:	9e e3       	ldi	r25, 0x3E	; 62
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Clear+0x8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Clear+0xe>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <LCD_Init>:
	_delay_ms(4);
}

void LCD_Init(void)
{
	LCD_Comm(0x38);
 16c:	88 e3       	ldi	r24, 0x38	; 56
 16e:	cb df       	rcall	.-106    	; 0x106 <LCD_Comm>
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9f e1       	ldi	r25, 0x1F	; 31
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x8>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0xe>
 17a:	00 00       	nop
	_delay_ms(2);
	LCD_Comm(0x38);
 17c:	88 e3       	ldi	r24, 0x38	; 56
 17e:	c3 df       	rcall	.-122    	; 0x106 <LCD_Comm>
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9f e1       	ldi	r25, 0x1F	; 31
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Init+0x18>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Init+0x1e>
	_delay_ms(2);
	LCD_Comm(0x38);
 18a:	00 00       	nop
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	bb df       	rcall	.-138    	; 0x106 <LCD_Comm>
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9f e1       	ldi	r25, 0x1F	; 31
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Init+0x28>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Init+0x2e>
	_delay_ms(2);
	LCD_Comm(0x0e);
 19a:	00 00       	nop
 19c:	8e e0       	ldi	r24, 0x0E	; 14
 19e:	b3 df       	rcall	.-154    	; 0x106 <LCD_Comm>
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9f e1       	ldi	r25, 0x1F	; 31
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x38>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0x3e>
	_delay_ms(2);
	LCD_Comm(0x06);
 1aa:	00 00       	nop
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	ab df       	rcall	.-170    	; 0x106 <LCD_Comm>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9f e1       	ldi	r25, 0x1F	; 31
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Init+0x48>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Init+0x4e>
	_delay_ms(2);
	LCD_Clear();
 1ba:	00 00       	nop
 1bc:	ce cf       	rjmp	.-100    	; 0x15a <LCD_Clear>
 1be:	08 95       	ret

000001c0 <keypad_Init>:
int rows = 0;
int cols = 0;

void keypad_Init()
{
	DDRD = 0xF0;		//상위 니블은 출력, 하위 니블은 입력
 1c0:	80 ef       	ldi	r24, 0xF0	; 240
 1c2:	81 bb       	out	0x11, r24	; 17
 1c4:	08 95       	ret

000001c6 <find_ROWS>:
// 	if (PIND == 0x01)
// }

int find_ROWS(int temp)
{
	if((temp & 0x01) == 1) return 0;
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <find_ROWS+0x16>
	else if ((temp & 0x02) == 2) return 1;
 1ca:	81 fd       	sbrc	r24, 1
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <find_ROWS+0x1c>
	else if ((temp & 0x04) == 4) return 2;
 1ce:	82 fd       	sbrc	r24, 2
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <find_ROWS+0x22>
	else if ((temp & 0x08) == 8) return 3;
 1d2:	83 ff       	sbrs	r24, 3
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <find_ROWS+0x28>
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
// 	if (PIND == 0x01)
// }

int find_ROWS(int temp)
{
	if((temp & 0x01) == 1) return 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 95       	ret
	else if ((temp & 0x02) == 2) return 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret
	else if ((temp & 0x04) == 4) return 2;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret
	else if ((temp & 0x08) == 8) return 3;
	else return -1;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
}
 1f2:	08 95       	ret

000001f4 <findnumber>:

Byte findnumber()
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	for (int i = 0; i<3; i++)
 1fc:	00 e0       	ldi	r16, 0x00	; 0
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	2e c0       	rjmp	.+92     	; 0x25e <findnumber+0x6a>
	{
		PORTD |= (1<<(i+4));
 202:	82 b3       	in	r24, 0x12	; 18
 204:	98 01       	movw	r18, r16
 206:	2c 5f       	subi	r18, 0xFC	; 252
 208:	3f 4f       	sbci	r19, 0xFF	; 255
 20a:	c1 e0       	ldi	r28, 0x01	; 1
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <findnumber+0x20>
 210:	cc 0f       	add	r28, r28
 212:	dd 1f       	adc	r29, r29
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <findnumber+0x1c>
 218:	8c 2b       	or	r24, r28
 21a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8a e1       	ldi	r24, 0x1A	; 26
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <findnumber+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <findnumber+0x30>
		_delay_us(5);
		temp = PIND;
 224:	80 b3       	in	r24, 0x10	; 16
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <temp+0x1>
 22c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temp>
		
		if(((temp&0x01) == 0x01)||((temp&0x02) == 0x02)||((temp&0x04) == 0x04)||((temp&0x08) == 0x08))
 230:	80 fd       	sbrc	r24, 0
 232:	06 c0       	rjmp	.+12     	; 0x240 <findnumber+0x4c>
 234:	81 fd       	sbrc	r24, 1
 236:	04 c0       	rjmp	.+8      	; 0x240 <findnumber+0x4c>
 238:	82 fd       	sbrc	r24, 2
 23a:	02 c0       	rjmp	.+4      	; 0x240 <findnumber+0x4c>
 23c:	83 ff       	sbrs	r24, 3
 23e:	09 c0       	rjmp	.+18     	; 0x252 <findnumber+0x5e>
		{
			rows = find_ROWS(temp);
 240:	c2 df       	rcall	.-124    	; 0x1c6 <find_ROWS>
 242:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rows+0x1>
 246:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rows>
			cols = i;
 24a:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <__data_end+0x1>
 24e:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <__data_end>
		}
		PORTD &= ~(1 << (i+4));
 252:	82 b3       	in	r24, 0x12	; 18
 254:	c0 95       	com	r28
 256:	c8 23       	and	r28, r24
 258:	c2 bb       	out	0x12, r28	; 18
	else return -1;
}

Byte findnumber()
{
	for (int i = 0; i<3; i++)
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
 25e:	03 30       	cpi	r16, 0x03	; 3
 260:	11 05       	cpc	r17, r1
 262:	7c f2       	brlt	.-98     	; 0x202 <findnumber+0xe>
			cols = i;
		}
		PORTD &= ~(1 << (i+4));
	}
	
	return pads[rows][cols];
 264:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rows>
 268:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rows+0x1>
 26c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 270:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 274:	ac 01       	movw	r20, r24
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	84 0f       	add	r24, r20
 27c:	95 1f       	adc	r25, r21
 27e:	80 50       	subi	r24, 0x00	; 0
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	fc 01       	movw	r30, r24
 284:	e2 0f       	add	r30, r18
 286:	f3 1f       	adc	r31, r19
	
}
 288:	80 81       	ld	r24, Z
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <main>:

int main(void)
{
	
	PortInit();
 294:	19 df       	rcall	.-462    	; 0xc8 <PortInit>
	LCD_Init();
 296:	6a df       	rcall	.-300    	; 0x16c <LCD_Init>
	
	keypad_Init();
 298:	93 df       	rcall	.-218    	; 0x1c0 <keypad_Init>
	int prev;
	
	
    while (1) 
    {
		LCD_pos(0,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
		LCD_CHAR(findnumber());
 29e:	55 df       	rcall	.-342    	; 0x14a <LCD_pos>
 2a0:	a9 df       	rcall	.-174    	; 0x1f4 <findnumber>
 2a2:	4b df       	rcall	.-362    	; 0x13a <LCD_CHAR>
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <main+0x6>

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
