
keypad_cal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000360  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800112  00800112  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c8  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9a  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000706  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000730  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	44 d1       	rcall	.+648    	; 0x34c <main>
  c4:	4b c1       	rjmp	.+662    	; 0x35c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <PortInit>:
#include <util/delay.h>
#include "LCD.h"

void PortInit(void)
{
	DDRC = 0xFF;	//DDRC로
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x07;	//DDRB로		RS RW 는 PORTD에
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret

000000d2 <LCD_Data>:
	
}

void LCD_Data(Byte ch)
{
	LCD_CTRL |= (1<<LCD_RS);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	91 60       	ori	r25, 0x01	; 1
  d6:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL &= ~(1<<LCD_RW);
  d8:	98 b3       	in	r25, 0x18	; 24
  da:	9d 7f       	andi	r25, 0xFD	; 253
  dc:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL |= (1<<LCD_EN);
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	e7 ec       	ldi	r30, 0xC7	; 199
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Data+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Data+0x1c>
  ee:	00 00       	nop
	_delay_us(50);
	LCD_WDATA = ch;
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	87 ec       	ldi	r24, 0xC7	; 199
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Data+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_Data+0x2a>
  fc:	00 00       	nop
	_delay_us(50);
	LCD_CTRL &= ~(1<<LCD_EN);
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret

00000106 <LCD_Comm>:
}

void LCD_Comm(Byte ch)
{
	LCD_CTRL &= ~(1<<LCD_RS);
 106:	98 b3       	in	r25, 0x18	; 24
 108:	9e 7f       	andi	r25, 0xFE	; 254
 10a:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL &= ~(1<<LCD_RW);
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	9d 7f       	andi	r25, 0xFD	; 253
 110:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL |= (1<<LCD_EN);
 112:	98 b3       	in	r25, 0x18	; 24
 114:	94 60       	ori	r25, 0x04	; 4
 116:	98 bb       	out	0x18, r25	; 24
 118:	e7 ec       	ldi	r30, 0xC7	; 199
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Comm+0x16>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_Comm+0x1c>
 122:	00 00       	nop
	_delay_us(50);
	LCD_WINST = ch;
 124:	85 bb       	out	0x15, r24	; 21
 126:	87 ec       	ldi	r24, 0xC7	; 199
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Comm+0x24>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Comm+0x2a>
 130:	00 00       	nop
	_delay_us(50);
	LCD_CTRL &= ~(1<<LCD_EN);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 95       	ret

0000013a <LCD_CHAR>:
}

void LCD_CHAR(Byte c)
{
	
	LCD_Data(c);
 13a:	cb df       	rcall	.-106    	; 0xd2 <LCD_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_CHAR+0x6>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_CHAR+0xc>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <LCD_STR>:
	_delay_ms(1);
}

void LCD_STR(Byte *str)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*str!=0)
 150:	02 c0       	rjmp	.+4      	; 0x156 <LCD_STR+0xc>
	{
		LCD_CHAR(*str);
 152:	f3 df       	rcall	.-26     	; 0x13a <LCD_CHAR>
		str++;
 154:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_STR(Byte *str)
{
	while(*str!=0)
 156:	88 81       	ld	r24, Y
 158:	81 11       	cpse	r24, r1
 15a:	fb cf       	rjmp	.-10     	; 0x152 <LCD_STR+0x8>
	{
		LCD_CHAR(*str);
		str++;
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <LCD_pos>:

void LCD_pos(unsigned char col, unsigned char row)
{
	
	LCD_Comm(0x80 | (row+col*0x40));
 162:	90 e4       	ldi	r25, 0x40	; 64
 164:	89 9f       	mul	r24, r25
 166:	60 0d       	add	r22, r0
 168:	11 24       	eor	r1, r1
 16a:	86 2f       	mov	r24, r22
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	cb cf       	rjmp	.-106    	; 0x106 <LCD_Comm>
 170:	08 95       	ret

00000172 <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_Comm(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	c8 df       	rcall	.-112    	; 0x106 <LCD_Comm>
 176:	8f e7       	ldi	r24, 0x7F	; 127
 178:	9e e3       	ldi	r25, 0x3E	; 62
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Clear+0x8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Clear+0xe>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <LCD_Init>:
	_delay_ms(4);
}

void LCD_Init(void)
{
	LCD_Comm(0x38);
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	bf df       	rcall	.-130    	; 0x106 <LCD_Comm>
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9f e1       	ldi	r25, 0x1F	; 31
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0xe>
 192:	00 00       	nop
	_delay_ms(2);
	LCD_Comm(0x38);
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	b7 df       	rcall	.-146    	; 0x106 <LCD_Comm>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9f e1       	ldi	r25, 0x1F	; 31
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x18>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x1e>
	_delay_ms(2);
	LCD_Comm(0x38);
 1a2:	00 00       	nop
 1a4:	88 e3       	ldi	r24, 0x38	; 56
 1a6:	af df       	rcall	.-162    	; 0x106 <LCD_Comm>
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	9f e1       	ldi	r25, 0x1F	; 31
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Init+0x28>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Init+0x2e>
	_delay_ms(2);
	LCD_Comm(0x0e);
 1b2:	00 00       	nop
 1b4:	8e e0       	ldi	r24, 0x0E	; 14
 1b6:	a7 df       	rcall	.-178    	; 0x106 <LCD_Comm>
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9f e1       	ldi	r25, 0x1F	; 31
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x38>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x3e>
	_delay_ms(2);
	LCD_Comm(0x06);
 1c2:	00 00       	nop
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	9f df       	rcall	.-194    	; 0x106 <LCD_Comm>
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	9f e1       	ldi	r25, 0x1F	; 31
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_Init+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_Init+0x4e>
	_delay_ms(2);
	LCD_Clear();
 1d2:	00 00       	nop
 1d4:	ce cf       	rjmp	.-100    	; 0x172 <LCD_Clear>
 1d6:	08 95       	ret

000001d8 <keypad_Init>:
int rows = -1;
int cols = -1;

void keypad_Init()
{
	DDRD = 0xF0;		//상위 니블은 출력, 하위 니블은 입력
 1d8:	80 ef       	ldi	r24, 0xF0	; 240
 1da:	81 bb       	out	0x11, r24	; 17
 1dc:	08 95       	ret

000001de <find_ROWS>:
// 	if (PIND == 0x01)
// }

int find_ROWS(int temp)
{
	if((temp & 0x01) == 1) return 0;
 1de:	80 fd       	sbrc	r24, 0
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <find_ROWS+0x16>
	else if ((temp & 0x02) == 2) return 1;
 1e2:	81 fd       	sbrc	r24, 1
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <find_ROWS+0x1c>
	else if ((temp & 0x04) == 4) return 2;
 1e6:	82 fd       	sbrc	r24, 2
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <find_ROWS+0x22>
	else if ((temp & 0x08) == 8) return 3;
 1ea:	83 ff       	sbrs	r24, 3
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <find_ROWS+0x28>
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret
// 	if (PIND == 0x01)
// }

int find_ROWS(int temp)
{
	if((temp & 0x01) == 1) return 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret
	else if ((temp & 0x02) == 2) return 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret
	else if ((temp & 0x04) == 4) return 2;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret
	else if ((temp & 0x08) == 8) return 3;
	else return -1;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	9f ef       	ldi	r25, 0xFF	; 255
}
 20a:	08 95       	ret

0000020c <reset>:

void reset()
{
	rows = -1;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	9f ef       	ldi	r25, 0xFF	; 255
 210:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rows+0x1>
 214:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rows>
	cols = -1;
 218:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cols+0x1>
 21c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cols>
 220:	08 95       	ret

00000222 <findnumber>:
}

Byte findnumber()
{
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	for (int i = 0; i<3; i++)
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	2e c0       	rjmp	.+92     	; 0x28c <findnumber+0x6a>
	{
		PORTD |= (1<<(i+4));
 230:	82 b3       	in	r24, 0x12	; 18
 232:	98 01       	movw	r18, r16
 234:	2c 5f       	subi	r18, 0xFC	; 252
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	c1 e0       	ldi	r28, 0x01	; 1
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <findnumber+0x20>
 23e:	cc 0f       	add	r28, r28
 240:	dd 1f       	adc	r29, r29
 242:	2a 95       	dec	r18
 244:	e2 f7       	brpl	.-8      	; 0x23e <findnumber+0x1c>
 246:	8c 2b       	or	r24, r28
 248:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8a e1       	ldi	r24, 0x1A	; 26
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <findnumber+0x2a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <findnumber+0x30>
		_delay_us(5);
		temp = PIND;
 252:	80 b3       	in	r24, 0x10	; 16
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <temp+0x1>
 25a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <temp>
		
		if(((temp&0x01) == 0x01)||((temp&0x02) == 0x02)||((temp&0x04) == 0x04)||((temp&0x08) == 0x08))
 25e:	80 fd       	sbrc	r24, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <findnumber+0x4c>
 262:	81 fd       	sbrc	r24, 1
 264:	04 c0       	rjmp	.+8      	; 0x26e <findnumber+0x4c>
 266:	82 fd       	sbrc	r24, 2
 268:	02 c0       	rjmp	.+4      	; 0x26e <findnumber+0x4c>
 26a:	83 ff       	sbrs	r24, 3
 26c:	09 c0       	rjmp	.+18     	; 0x280 <findnumber+0x5e>
		{
			rows = find_ROWS(temp);
 26e:	b7 df       	rcall	.-146    	; 0x1de <find_ROWS>
 270:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rows+0x1>
 274:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rows>
			cols = i;
 278:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <cols+0x1>
 27c:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <cols>
		}
		PORTD &= ~(1 << (i+4));
 280:	82 b3       	in	r24, 0x12	; 18
 282:	c0 95       	com	r28
 284:	c8 23       	and	r28, r24
 286:	c2 bb       	out	0x12, r28	; 18
	cols = -1;
}

Byte findnumber()
{
	for (int i = 0; i<3; i++)
 288:	0f 5f       	subi	r16, 0xFF	; 255
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
 28c:	03 30       	cpi	r16, 0x03	; 3
 28e:	11 05       	cpc	r17, r1
 290:	7c f2       	brlt	.-98     	; 0x230 <findnumber+0xe>
			cols = i;
		}
		PORTD &= ~(1 << (i+4));
	}
	
	return pads[rows][cols];
 292:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rows>
 296:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rows+0x1>
 29a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <cols>
 29e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <cols+0x1>
 2a2:	ac 01       	movw	r20, r24
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	84 0f       	add	r24, r20
 2aa:	95 1f       	adc	r25, r21
 2ac:	8a 5f       	subi	r24, 0xFA	; 250
 2ae:	9e 4f       	sbci	r25, 0xFE	; 254
 2b0:	fc 01       	movw	r30, r24
 2b2:	e2 0f       	add	r30, r18
 2b4:	f3 1f       	adc	r31, r19
	
}
 2b6:	80 81       	ld	r24, Z
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <inputnums>:
	static int line = 0;
	
	static Byte prev = ' ';
	static Byte curr = ' ';
	
	curr = findnumber();
 2c2:	af df       	rcall	.-162    	; 0x222 <findnumber>
 2c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <curr.1770>
	reset();
 2c8:	a1 df       	rcall	.-190    	; 0x20c <reset>
 2ca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(prev == curr) return;
 2ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <curr.1770>
 2d2:	98 17       	cp	r25, r24
 2d4:	d1 f1       	breq	.+116    	; 0x34a <inputnums+0x88>
 2d6:	90 ed       	ldi	r25, 0xD0	; 208
	if((curr>=48&&curr<=57) || curr==42 || curr==35)
 2d8:	98 0f       	add	r25, r24
 2da:	9a 30       	cpi	r25, 0x0A	; 10
 2dc:	20 f0       	brcs	.+8      	; 0x2e6 <inputnums+0x24>
 2de:	8a 32       	cpi	r24, 0x2A	; 42
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <inputnums+0x24>
 2e2:	83 32       	cpi	r24, 0x23	; 35
 2e4:	09 f5       	brne	.+66     	; 0x328 <inputnums+0x66>
 2e6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <index.1767>
	{

		arr[index] = curr;
 2ea:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <index.1767+0x1>
 2ee:	f9 01       	movw	r30, r18
 2f0:	ec 5e       	subi	r30, 0xEC	; 236
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	80 83       	st	Z, r24
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		prev = arr[index];
 2fa:	c9 01       	movw	r24, r18
		index++;
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <index.1767+0x1>
 302:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index.1767>
 306:	41 97       	sbiw	r24, 0x11	; 17
		if(index > 16)
 308:	34 f0       	brlt	.+12     	; 0x316 <inputnums+0x54>
 30a:	81 e0       	ldi	r24, 0x01	; 1
		{
			line = 1;
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 312:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 316:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	81 ee       	ldi	r24, 0xE1	; 225
 31a:	94 e0       	ldi	r25, 0x04	; 4
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <inputnums+0x5a>
 324:	00 c0       	rjmp	.+0      	; 0x326 <inputnums+0x64>
 326:	00 00       	nop
 328:	60 e0       	ldi	r22, 0x00	; 0
		}
		_delay_ms(100);
	}
	
	LCD_pos(line, 0);
 32a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 32e:	19 df       	rcall	.-462    	; 0x162 <LCD_pos>
 330:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
	
	if (line==1)
 334:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	21 f4       	brne	.+8      	; 0x344 <inputnums+0x82>
	{
		LCD_STR(arr+16);
 33c:	84 e2       	ldi	r24, 0x24	; 36
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	04 cf       	rjmp	.-504    	; 0x14a <LCD_STR>
 342:	08 95       	ret
	}
	else {
		LCD_STR(arr);
 344:	84 e1       	ldi	r24, 0x14	; 20
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	00 cf       	rjmp	.-512    	; 0x14a <LCD_STR>
 34a:	08 95       	ret

0000034c <main>:
 34c:	bd de       	rcall	.-646    	; 0xc8 <PortInit>

int main(void)
{
	
	PortInit();
	LCD_Init();
 34e:	1a df       	rcall	.-460    	; 0x184 <LCD_Init>
	
	keypad_Init();
 350:	43 df       	rcall	.-378    	; 0x1d8 <keypad_Init>
	
	
	
	LCD_pos(0, 0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	05 df       	rcall	.-502    	; 0x162 <LCD_pos>
	
	while (1)
	{
		
		inputnums();
 358:	b4 df       	rcall	.-152    	; 0x2c2 <inputnums>
 35a:	fe cf       	rjmp	.-4      	; 0x358 <main+0xc>

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
