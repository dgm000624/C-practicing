
timer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800120  00800120  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9f  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000455  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000316  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	ae c0       	rjmp	.+348    	; 0x182 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f1 d0       	rcall	.+482    	; 0x2a6 <main>
  c4:	33 c1       	rjmp	.+614    	; 0x32c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:

int t_cnt = 0, m_cnt = 0, cnt = 0 , s_cnt = 0, rep = 0;
int prev = 0, init = 0;

void Segment(int N)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	unsigned char N1000, N100, N10, N1;
	int Buff;
	
	N1000 = N/1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	04 d1       	rcall	.+520    	; 0x2de <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
	Buff = N % 1000;
	N100 = Buff/100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	00 d1       	rcall	.+512    	; 0x2de <__divmodhi4>
  de:	eb 01       	movw	r28, r22
	Buff = Buff % 100;
	N10 = Buff /10;
	N1 = Buff % 10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	fc d0       	rcall	.+504    	; 0x2de <__divmodhi4>
	
	for( int i = 0; i<30;i++){
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	42 c0       	rjmp	.+132    	; 0x170 <Segment+0xa8>
		PORTC = 0x0e;
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N1000];
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	40 81       	ld	r20, Z
  fe:	40 95       	com	r20
 100:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	e6 e6       	ldi	r30, 0x66	; 102
 104:	fe e0       	ldi	r31, 0x0E	; 14
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Segment+0x3e>
 10a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0d;
 10c:	4d e0       	ldi	r20, 0x0D	; 13
 10e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N100];
 110:	fe 01       	movw	r30, r28
 112:	ff 27       	eor	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	40 81       	ld	r20, Z
 11e:	40 95       	com	r20
 120:	4b bb       	out	0x1b, r20	; 27
 122:	e6 e6       	ldi	r30, 0x66	; 102
 124:	fe e0       	ldi	r31, 0x0E	; 14
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <Segment+0x5e>
 12a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0b;
 12c:	4b e0       	ldi	r20, 0x0B	; 11
 12e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N10];
 130:	fb 01       	movw	r30, r22
 132:	ff 27       	eor	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	40 81       	ld	r20, Z
 13e:	40 95       	com	r20
 140:	4b bb       	out	0x1b, r20	; 27
 142:	e6 e6       	ldi	r30, 0x66	; 102
 144:	fe e0       	ldi	r31, 0x0E	; 14
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Segment+0x7e>
 14a:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x07;
 14c:	47 e0       	ldi	r20, 0x07	; 7
 14e:	45 bb       	out	0x15, r20	; 21
		PORTA = ~Font[N1];
 150:	fc 01       	movw	r30, r24
 152:	ff 27       	eor	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	40 81       	ld	r20, Z
 15e:	40 95       	com	r20
 160:	4b bb       	out	0x1b, r20	; 27
 162:	e6 e6       	ldi	r30, 0x66	; 102
 164:	fe e0       	ldi	r31, 0x0E	; 14
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <Segment+0x9e>
 16a:	00 00       	nop
	N100 = Buff/100;
	Buff = Buff % 100;
	N10 = Buff /10;
	N1 = Buff % 10;
	
	for( int i = 0; i<30;i++){
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	2e 31       	cpi	r18, 0x1E	; 30
 172:	31 05       	cpc	r19, r1
 174:	0c f4       	brge	.+2      	; 0x178 <Segment+0xb0>
 176:	ba cf       	rjmp	.-140    	; 0xec <Segment+0x24>
		
		PORTC = 0x07;
		PORTA = ~Font[N1];
		_delay_ms(1);
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
	cli();
 190:	f8 94       	cli
	if (init == 1)
 192:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 196:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 f4       	brne	.+40     	; 0x1c6 <__vector_9+0x44>
	{ 
		s_cnt++;
 19e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <s_cnt>
 1a2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <s_cnt+0x1>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <s_cnt+0x1>
 1ac:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <s_cnt>
		
		if(s_cnt >=100){
 1b0:	84 36       	cpi	r24, 0x64	; 100
 1b2:	91 05       	cpc	r25, r1
 1b4:	44 f0       	brlt	.+16     	; 0x1c6 <__vector_9+0x44>
			init = 0;
 1b6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 1ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			s_cnt = 0;
 1be:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <s_cnt+0x1>
 1c2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <s_cnt>
		}
		
	}
	
	if (rep == 0){
 1c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rep>
 1ca:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rep+0x1>
 1ce:	89 2b       	or	r24, r25
 1d0:	61 f5       	brne	.+88     	; 0x22a <__vector_9+0xa8>
		cnt++;
 1d2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cnt>
 1d6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cnt+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <cnt+0x1>
 1e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cnt>
		if(cnt==1)
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	69 f4       	brne	.+26     	; 0x202 <__vector_9+0x80>
		{
			t_cnt++;
 1e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <t_cnt>
 1ec:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <t_cnt+0x1>
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <t_cnt+0x1>
 1f6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <t_cnt>
			cnt = 0;
 1fa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <cnt+0x1>
 1fe:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cnt>

		}
		if(t_cnt >=100){
 202:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <t_cnt>
 206:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <t_cnt+0x1>
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	91 05       	cpc	r25, r1
 20e:	6c f0       	brlt	.+26     	; 0x22a <__vector_9+0xa8>
			t_cnt = 0;
 210:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <t_cnt+0x1>
 214:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <t_cnt>
			m_cnt ++;
 218:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <m_cnt>
 21c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <m_cnt+0x1>
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <m_cnt+0x1>
 226:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <m_cnt>
		}
	}
	sei();
 22a:	78 94       	sei
}
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_1>:

ISR(INT0_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
	if(init ==1){
 248:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 24c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	11 f1       	breq	.+68     	; 0x298 <__vector_1+0x5e>
		return;
	}
	
	if(rep==0)
 254:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rep>
 258:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rep+0x1>
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	69 f4       	brne	.+26     	; 0x27a <__vector_1+0x40>
	{
		prev =TCNT2;
 260:	84 b5       	in	r24, 0x24	; 36
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <prev+0x1>
 268:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <prev>
		rep = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <rep+0x1>
 274:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rep>
 278:	09 c0       	rjmp	.+18     	; 0x28c <__vector_1+0x52>
	}
	else if(rep==1)
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	39 f4       	brne	.+14     	; 0x28c <__vector_1+0x52>
	{
		rep = 0;
 27e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <rep+0x1>
 282:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rep>
		TCNT2 = prev;
 286:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <prev>
 28a:	84 bd       	out	0x24, r24	; 36
	}
	init = 1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 294:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <main>:


int main(void)
{
	DDRA = 0xff;
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	9a bb       	out	0x1a, r25	; 26
    DDRC = 0x0f;
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 2ae:	11 ba       	out	0x11, r1	; 17
	PORTA = 0xff;
 2b0:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0x0f;
 2b2:	85 bb       	out	0x15, r24	; 21
	ASSR = 0;												//내부 클럭을 사용할지 비동기 외부 클럭 사용할지 설정
 2b4:	10 be       	out	0x30, r1	; 48
    TCCR2 = 0x0d;											//256분주비
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	85 bd       	out	0x25, r24	; 37
    TCNT2 = 0x00;											// 255 + 1 _ 0x0f 
 2ba:	14 bc       	out	0x24, r1	; 36
    TIMSK = 0x80;											// 인터럽트 허용
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	87 bf       	out	0x37, r24	; 55
	OCR2 = 144;
 2c0:	80 e9       	ldi	r24, 0x90	; 144
 2c2:	83 bd       	out	0x23, r24	; 35
    TIFR = 0;												// 인터럽트 플래그(여기선 무쓸모, 자동 인터럽트 발생이 아닌 수동 처리시 필요)
 2c4:	16 be       	out	0x36, r1	; 54
	
	EICRA = (1<<ISC01 | 1<<ISC00);
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 1 << INT0;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	89 bf       	out	0x39, r24	; 57
	
    sei();
 2d0:	78 94       	sei
	


    while (1) 
    {
		Segment(m_cnt);
 2d2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <m_cnt>
 2d6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <m_cnt+0x1>
 2da:	f6 de       	rcall	.-532    	; 0xc8 <Segment>
 2dc:	fa cf       	rjmp	.-12     	; 0x2d2 <main+0x2c>

000002de <__divmodhi4>:
 2de:	97 fb       	bst	r25, 7
 2e0:	07 2e       	mov	r0, r23
 2e2:	16 f4       	brtc	.+4      	; 0x2e8 <__divmodhi4+0xa>
 2e4:	00 94       	com	r0
 2e6:	06 d0       	rcall	.+12     	; 0x2f4 <__divmodhi4_neg1>
 2e8:	77 fd       	sbrc	r23, 7
 2ea:	08 d0       	rcall	.+16     	; 0x2fc <__divmodhi4_neg2>
 2ec:	0b d0       	rcall	.+22     	; 0x304 <__udivmodhi4>
 2ee:	07 fc       	sbrc	r0, 7
 2f0:	05 d0       	rcall	.+10     	; 0x2fc <__divmodhi4_neg2>
 2f2:	3e f4       	brtc	.+14     	; 0x302 <__divmodhi4_exit>

000002f4 <__divmodhi4_neg1>:
 2f4:	90 95       	com	r25
 2f6:	81 95       	neg	r24
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	08 95       	ret

000002fc <__divmodhi4_neg2>:
 2fc:	70 95       	com	r23
 2fe:	61 95       	neg	r22
 300:	7f 4f       	sbci	r23, 0xFF	; 255

00000302 <__divmodhi4_exit>:
 302:	08 95       	ret

00000304 <__udivmodhi4>:
 304:	aa 1b       	sub	r26, r26
 306:	bb 1b       	sub	r27, r27
 308:	51 e1       	ldi	r21, 0x11	; 17
 30a:	07 c0       	rjmp	.+14     	; 0x31a <__udivmodhi4_ep>

0000030c <__udivmodhi4_loop>:
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	a6 17       	cp	r26, r22
 312:	b7 07       	cpc	r27, r23
 314:	10 f0       	brcs	.+4      	; 0x31a <__udivmodhi4_ep>
 316:	a6 1b       	sub	r26, r22
 318:	b7 0b       	sbc	r27, r23

0000031a <__udivmodhi4_ep>:
 31a:	88 1f       	adc	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	5a 95       	dec	r21
 320:	a9 f7       	brne	.-22     	; 0x30c <__udivmodhi4_loop>
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	bc 01       	movw	r22, r24
 328:	cd 01       	movw	r24, r26
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
