
timer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800120  00800120  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a87  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088a  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000449  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	cc c0       	rjmp	.+408    	; 0x1d6 <__vector_15>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b6 d0       	rcall	.+364    	; 0x230 <main>
  c4:	f9 c0       	rjmp	.+498    	; 0x2b8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <RSegment>:
{
	int i = 0;
	unsigned char N10, N1;

	N10 = N /10;
	N1 = N % 10;
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	ce d0       	rcall	.+412    	; 0x26a <__divmodhi4>
  ce:	ac 01       	movw	r20, r24
	
	for(i = 0; i<5;i++){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	22 c0       	rjmp	.+68     	; 0x11a <RSegment+0x52>
		
		PORTC = 0x0b;
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	85 bb       	out	0x15, r24	; 21
		PORTA = ~Font[N10];
  da:	fb 01       	movw	r30, r22
  dc:	ff 27       	eor	r31, r31
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	e0 50       	subi	r30, 0x00	; 0
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	80 95       	com	r24
  ea:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	9e e0       	ldi	r25, 0x0E	; 14
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <RSegment+0x28>
  f4:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x07;
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	85 bb       	out	0x15, r24	; 21
		PORTA = ~Font[N1];
  fa:	fa 01       	movw	r30, r20
  fc:	ff 27       	eor	r31, r31
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	e0 50       	subi	r30, 0x00	; 0
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	90 81       	ld	r25, Z
 108:	90 95       	com	r25
 10a:	9b bb       	out	0x1b, r25	; 27
 10c:	86 e6       	ldi	r24, 0x66	; 102
 10e:	9e e0       	ldi	r25, 0x0E	; 14
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <RSegment+0x48>
 114:	00 00       	nop
	unsigned char N10, N1;

	N10 = N /10;
	N1 = N % 10;
	
	for(i = 0; i<5;i++){
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	25 30       	cpi	r18, 0x05	; 5
 11c:	31 05       	cpc	r19, r1
 11e:	dc f2       	brlt	.-74     	; 0xd6 <RSegment+0xe>
		
		PORTC = 0x07;
		PORTA = ~Font[N1];
		_delay_ms(1);
	}
}
 120:	08 95       	ret

00000122 <LSegment>:
{
	int i = 0;
	unsigned char N10, N1;
	
	N10 = N /10;
	N1 = N % 10;
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	a1 d0       	rcall	.+322    	; 0x26a <__divmodhi4>
 128:	ac 01       	movw	r20, r24
	
	for(i = 0; i<5;i++){
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	22 c0       	rjmp	.+68     	; 0x174 <LSegment+0x52>
		
		PORTC = 0x0e;
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	85 bb       	out	0x15, r24	; 21
		PORTA = ~Font[N10];
 134:	fb 01       	movw	r30, r22
 136:	ff 27       	eor	r31, r31
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	80 95       	com	r24
 144:	8b bb       	out	0x1b, r24	; 27
 146:	86 e6       	ldi	r24, 0x66	; 102
 148:	9e e0       	ldi	r25, 0x0E	; 14
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LSegment+0x28>
 14e:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0d;
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	85 bb       	out	0x15, r24	; 21
		PORTA = ~Font[N1];
 154:	fa 01       	movw	r30, r20
 156:	ff 27       	eor	r31, r31
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	90 81       	ld	r25, Z
 162:	90 95       	com	r25
 164:	9b bb       	out	0x1b, r25	; 27
 166:	86 e6       	ldi	r24, 0x66	; 102
 168:	9e e0       	ldi	r25, 0x0E	; 14
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LSegment+0x48>
 16e:	00 00       	nop
	unsigned char N10, N1;
	
	N10 = N /10;
	N1 = N % 10;
	
	for(i = 0; i<5;i++){
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	25 30       	cpi	r18, 0x05	; 5
 176:	31 05       	cpc	r19, r1
 178:	dc f2       	brlt	.-74     	; 0x130 <LSegment+0xe>
		
		PORTC = 0x0d;
		PORTA = ~Font[N1];
		_delay_ms(1);
	}
}
 17a:	08 95       	ret

0000017c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
	tr_cnt++;
 18a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tr_cnt>
 18e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <tr_cnt+0x1>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <tr_cnt+0x1>
 198:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tr_cnt>
	if(tr_cnt>=56){
 19c:	c8 97       	sbiw	r24, 0x38	; 56
 19e:	a4 f0       	brlt	.+40     	; 0x1c8 <__vector_16+0x4c>
		tr_cnt = 0;
 1a0:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <tr_cnt+0x1>
 1a4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <tr_cnt>
		mr_cnt++;
 1a8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mr_cnt>
 1ac:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mr_cnt+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <mr_cnt+0x1>
 1b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <mr_cnt>
		if(mr_cnt > 99) mr_cnt = 0;
 1ba:	84 36       	cpi	r24, 0x64	; 100
 1bc:	91 05       	cpc	r25, r1
 1be:	24 f0       	brlt	.+8      	; 0x1c8 <__vector_16+0x4c>
 1c0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <mr_cnt+0x1>
 1c4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <mr_cnt>
	}
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_15>:

ISR(TIMER0_COMP_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
	tl_cnt++;
 1e4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tl_cnt>
 1e8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <tl_cnt+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <tl_cnt+0x1>
 1f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tl_cnt>
	if(tl_cnt>=28){
 1f6:	4c 97       	sbiw	r24, 0x1c	; 28
 1f8:	a4 f0       	brlt	.+40     	; 0x222 <__vector_15+0x4c>
		tl_cnt = 0;
 1fa:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <tl_cnt+0x1>
 1fe:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <tl_cnt>
		ml_cnt++;
 202:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 206:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 210:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		if(ml_cnt > 99) ml_cnt = 0;
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	91 05       	cpc	r25, r1
 218:	24 f0       	brlt	.+8      	; 0x222 <__vector_15+0x4c>
 21a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 21e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	}
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <main>:

int main(void)
{
	DDRA = 0xff;
 230:	9f ef       	ldi	r25, 0xFF	; 255
 232:	9a bb       	out	0x1a, r25	; 26
    DDRC = 0x0f;
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	84 bb       	out	0x14, r24	; 20
	
	PORTA = 0xff;
 238:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0x0f;
 23a:	85 bb       	out	0x15, r24	; 21
	
	DDRB = 0x10;
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	87 bb       	out	0x17, r24	; 23
	ASSR = 0;	
 240:	10 be       	out	0x30, r1	; 48
												//내부 클럭을 사용할지 비동기 외부 클럭 사용할지 설정
    TCCR0 = 0x6f;											//256분주비											// 255 + 1 _ 0x0f 
 242:	8f e6       	ldi	r24, 0x6F	; 111
 244:	83 bf       	out	0x33, r24	; 51
    TIMSK = 0x03;											// 인터럽트 허용
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0x00;
 24a:	12 be       	out	0x32, r1	; 50
	OCR0 = 102;
 24c:	86 e6       	ldi	r24, 0x66	; 102
 24e:	81 bf       	out	0x31, r24	; 49
    TIFR = 0;												// 인터럽트 플래그(여기선 무쓸모, 자동 인터럽트 발생이 아닌 수동 처리시 필요)
 250:	16 be       	out	0x36, r1	; 54

	
    sei();
 252:	78 94       	sei
	


    while (1) 
    {
		LSegment(ml_cnt);
 254:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 258:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 25c:	62 df       	rcall	.-316    	; 0x122 <LSegment>
		RSegment(mr_cnt);
 25e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mr_cnt>
 262:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mr_cnt+0x1>
 266:	30 df       	rcall	.-416    	; 0xc8 <RSegment>
 268:	f5 cf       	rjmp	.-22     	; 0x254 <main+0x24>

0000026a <__divmodhi4>:
 26a:	97 fb       	bst	r25, 7
 26c:	07 2e       	mov	r0, r23
 26e:	16 f4       	brtc	.+4      	; 0x274 <__divmodhi4+0xa>
 270:	00 94       	com	r0
 272:	06 d0       	rcall	.+12     	; 0x280 <__divmodhi4_neg1>
 274:	77 fd       	sbrc	r23, 7
 276:	08 d0       	rcall	.+16     	; 0x288 <__divmodhi4_neg2>
 278:	0b d0       	rcall	.+22     	; 0x290 <__udivmodhi4>
 27a:	07 fc       	sbrc	r0, 7
 27c:	05 d0       	rcall	.+10     	; 0x288 <__divmodhi4_neg2>
 27e:	3e f4       	brtc	.+14     	; 0x28e <__divmodhi4_exit>

00000280 <__divmodhi4_neg1>:
 280:	90 95       	com	r25
 282:	81 95       	neg	r24
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	08 95       	ret

00000288 <__divmodhi4_neg2>:
 288:	70 95       	com	r23
 28a:	61 95       	neg	r22
 28c:	7f 4f       	sbci	r23, 0xFF	; 255

0000028e <__divmodhi4_exit>:
 28e:	08 95       	ret

00000290 <__udivmodhi4>:
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	51 e1       	ldi	r21, 0x11	; 17
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <__udivmodhi4_ep>

00000298 <__udivmodhi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	a6 17       	cp	r26, r22
 29e:	b7 07       	cpc	r27, r23
 2a0:	10 f0       	brcs	.+4      	; 0x2a6 <__udivmodhi4_ep>
 2a2:	a6 1b       	sub	r26, r22
 2a4:	b7 0b       	sbc	r27, r23

000002a6 <__udivmodhi4_ep>:
 2a6:	88 1f       	adc	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	5a 95       	dec	r21
 2ac:	a9 f7       	brne	.-22     	; 0x298 <__udivmodhi4_loop>
 2ae:	80 95       	com	r24
 2b0:	90 95       	com	r25
 2b2:	bc 01       	movw	r22, r24
 2b4:	cd 01       	movw	r24, r26
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
