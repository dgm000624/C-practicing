
timer4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab9  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088e  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000441  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ed  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__vector_15>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5c d0       	rcall	.+184    	; 0x17c <main>
  c4:	74 c0       	rjmp	.+232    	; 0x1ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
		_delay_ms(1);
	}
}

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	tr_cnt++;
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tr_cnt>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tr_cnt+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tr_cnt+0x1>
  e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tr_cnt>
	if(tr_cnt>=56){
  e8:	c8 97       	sbiw	r24, 0x38	; 56
  ea:	a4 f0       	brlt	.+40     	; 0x114 <__vector_16+0x4c>
		tr_cnt = 0;
  ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tr_cnt+0x1>
  f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tr_cnt>
		mr_cnt++;
  f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mr_cnt>
  f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <mr_cnt+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mr_cnt+0x1>
 102:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mr_cnt>
		if(mr_cnt > 99) mr_cnt = 0;
 106:	84 36       	cpi	r24, 0x64	; 100
 108:	91 05       	cpc	r25, r1
 10a:	24 f0       	brlt	.+8      	; 0x114 <__vector_16+0x4c>
 10c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <mr_cnt+0x1>
 110:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mr_cnt>
	}
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_15>:

ISR(TIMER0_COMP_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
	tl_cnt++;
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tl_cnt>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tl_cnt+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tl_cnt+0x1>
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tl_cnt>
	if(tl_cnt>=28){
 142:	4c 97       	sbiw	r24, 0x1c	; 28
 144:	a4 f0       	brlt	.+40     	; 0x16e <__vector_15+0x4c>
		tl_cnt = 0;
 146:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tl_cnt+0x1>
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tl_cnt>
		ml_cnt++;
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(ml_cnt > 99) ml_cnt = 0;
 160:	84 36       	cpi	r24, 0x64	; 100
 162:	91 05       	cpc	r25, r1
 164:	24 f0       	brlt	.+8      	; 0x16e <__vector_15+0x4c>
 166:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:

int main(void)
{
	int Duty = 255;
	
	DDRB = 0x80;
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	87 bb       	out	0x17, r24	; 23
	ASSR = 0;	
 180:	10 be       	out	0x30, r1	; 48
												//내부 클럭을 사용할지 비동기 외부 클럭 사용할지 설정
    TCCR2 = 0x6d;											//256분주비											// 255 + 1 _ 0x0f 
 182:	8d e6       	ldi	r24, 0x6D	; 109
 184:	85 bd       	out	0x25, r24	; 37
    TIMSK = 0x00;											// 인터럽트 허용
 186:	17 be       	out	0x37, r1	; 55
	TCNT2 = 0x00;
 188:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0;
 18a:	13 bc       	out	0x23, r1	; 35
    TIFR = 0;												// 인터럽트 플래그(여기선 무쓸모, 자동 인터럽트 발생이 아닌 수동 처리시 필요)
 18c:	16 be       	out	0x36, r1	; 54
	}
}

int main(void)
{
	int Duty = 255;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2c ec       	ldi	r18, 0xCC	; 204
 194:	3c ec       	ldi	r19, 0xCC	; 204
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	40 40       	sbci	r20, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x1c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x26>


    while (1) 
    {
		_delay_ms(40);
		Duty--;
 1a2:	01 97       	sbiw	r24, 0x01	; 1
		if(Duty < 0) Duty = 255;
 1a4:	12 f4       	brpl	.+4      	; 0x1aa <main+0x2e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
		OCR2 = Duty;
 1aa:	83 bd       	out	0x23, r24	; 35

		
    }
 1ac:	f2 cf       	rjmp	.-28     	; 0x192 <main+0x16>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
